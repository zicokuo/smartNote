# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
            },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
            },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
            },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
            },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]
    status: _int


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    account: _str
    password: _str
    nickname: _str
    salt: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]
    status: _int


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    account: _str
    password: _str
    nickname: _str
    salt: _str


class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]


_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

UserWhereUniqueInput = _UserWhereUnique_id_Input


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    account: _str
    password: _str
    nickname: _str
    salt: _str
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]
    status: Union[AtomicIntInput, _int]


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    account: _str
    password: _str
    nickname: _str
    salt: _str
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]
    status: Union[AtomicIntInput, _int]


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UserCreateOrConnectWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'
    # connectOrCreate: 'UserCreateOrConnectWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_account_OrderByInput = TypedDict(
    '_User_account_OrderByInput',
    {
        'account': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_User_nickname_OrderByInput = TypedDict(
    '_User_nickname_OrderByInput',
    {
        'nickname': 'SortOrder',
    },
    total=True
)

_User_salt_OrderByInput = TypedDict(
    '_User_salt_OrderByInput',
    {
        'salt': 'SortOrder',
    },
    total=True
)

_User_created_at_OrderByInput = TypedDict(
    '_User_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_User_updated_at_OrderByInput = TypedDict(
    '_User_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

_User_status_OrderByInput = TypedDict(
    '_User_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_account_OrderByInput',
    '_User_password_OrderByInput',
    '_User_nickname_OrderByInput',
    '_User_salt_OrderByInput',
    '_User_created_at_OrderByInput',
    '_User_updated_at_OrderByInput',
    '_User_status_OrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class DictIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    values: Union[bool, 'FindManyDictValuesArgsFromUserRecursive1']


class DictIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    values: Union[bool, 'FindManyDictValuesArgsFromUserRecursive2']


class DictIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    values: Union[bool, 'FindManyDictValuesArgsFromUserRecursive3']


class DictIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    values: Union[bool, 'FindManyDictValuesArgsFromUserRecursive4']


class DictIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class DictArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'DictIncludeFromDictRecursive1'


class DictArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'DictIncludeFromDictRecursive2'


class DictArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'DictIncludeFromDictRecursive3'


class DictArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'DictIncludeFromDictRecursive4'


class DictArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyDictArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive1'


class FindManyDictArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive2'


class FindManyDictArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive3'


class FindManyDictArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive4'


class FindManyDictArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    
    

class DictValuesIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    Dict: Union[bool, 'DictArgsFromUserRecursive1']


class DictValuesIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    Dict: Union[bool, 'DictArgsFromUserRecursive2']


class DictValuesIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    Dict: Union[bool, 'DictArgsFromUserRecursive3']


class DictValuesIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    Dict: Union[bool, 'DictArgsFromUserRecursive4']


class DictValuesIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class DictValuesArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'DictValuesIncludeFromDictValuesRecursive1'


class DictValuesArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'DictValuesIncludeFromDictValuesRecursive2'


class DictValuesArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'DictValuesIncludeFromDictValuesRecursive3'


class DictValuesArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'DictValuesIncludeFromDictValuesRecursive4'


class DictValuesArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyDictValuesArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive1'


class FindManyDictValuesArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive2'


class FindManyDictValuesArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive3'


class FindManyDictValuesArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive4'


class FindManyDictValuesArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    
    

class PostIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    tags: Union[bool, 'FindManyPostTagsArgsFromUserRecursive1']


class PostIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    tags: Union[bool, 'FindManyPostTagsArgsFromUserRecursive2']


class PostIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    tags: Union[bool, 'FindManyPostTagsArgsFromUserRecursive3']


class PostIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    tags: Union[bool, 'FindManyPostTagsArgsFromUserRecursive4']


class PostIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class PostArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPostArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    
    

class PostCateIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    parent: Union[bool, 'PostCateArgsFromUserRecursive1']
    PostCate: Union[bool, 'FindManyPostCateArgsFromUserRecursive1']


class PostCateIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    parent: Union[bool, 'PostCateArgsFromUserRecursive2']
    PostCate: Union[bool, 'FindManyPostCateArgsFromUserRecursive2']


class PostCateIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    parent: Union[bool, 'PostCateArgsFromUserRecursive3']
    PostCate: Union[bool, 'FindManyPostCateArgsFromUserRecursive3']


class PostCateIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    parent: Union[bool, 'PostCateArgsFromUserRecursive4']
    PostCate: Union[bool, 'FindManyPostCateArgsFromUserRecursive4']


class PostCateIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class PostCateArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostCateIncludeFromPostCateRecursive1'


class PostCateArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostCateIncludeFromPostCateRecursive2'


class PostCateArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostCateIncludeFromPostCateRecursive3'


class PostCateArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostCateIncludeFromPostCateRecursive4'


class PostCateArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPostCateArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive1'


class FindManyPostCateArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive2'


class FindManyPostCateArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive3'


class FindManyPostCateArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive4'


class FindManyPostCateArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    
    

class PostTagsIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive1']


class PostTagsIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive2']


class PostTagsIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive3']


class PostTagsIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive4']


class PostTagsIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class PostTagsArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostTagsIncludeFromPostTagsRecursive1'


class PostTagsArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostTagsIncludeFromPostTagsRecursive2'


class PostTagsArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostTagsIncludeFromPostTagsRecursive3'


class PostTagsArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostTagsIncludeFromPostTagsRecursive4'


class PostTagsArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPostTagsArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive1'


class FindManyPostTagsArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive2'


class FindManyPostTagsArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive3'


class FindManyPostTagsArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive4'


class FindManyPostTagsArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    account: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    nickname: Union[_str, 'types.StringFilter']
    salt: Union[_str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    account: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    nickname: Union[_str, 'types.StringFilter']
    salt: Union[_str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    account: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    nickname: Union[_str, 'types.StringFilter']
    salt: Union[_str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    account: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    nickname: Union[_str, 'types.StringFilter']
    salt: Union[_str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    account: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    nickname: Union[_str, 'types.StringFilter']
    salt: Union[_str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: Union[_int, 'types.IntFilter']



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    account: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    nickname: Union[_str, 'types.StringWithAggregatesFilter']
    salt: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    account: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    nickname: Union[_str, 'types.StringWithAggregatesFilter']
    salt: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    account: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    nickname: Union[_str, 'types.StringWithAggregatesFilter']
    salt: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    account: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    nickname: Union[_str, 'types.StringWithAggregatesFilter']
    salt: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    account: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    nickname: Union[_str, 'types.StringWithAggregatesFilter']
    salt: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    account: _str
    password: _str
    nickname: _str
    salt: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    status: _int
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""
    status: float


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""
    status: _int


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    account: _str
    password: _str
    nickname: _str
    salt: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    status: _int


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    account: bool
    password: bool
    nickname: bool
    salt: bool
    created_at: bool
    updated_at: bool
    status: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    account: bool
    password: bool
    nickname: bool
    salt: bool
    created_at: bool
    updated_at: bool
    status: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""
    status: bool


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'account': bool,
        'password': bool,
        'nickname': bool,
        'salt': bool,
        'created_at': bool,
        'updated_at': bool,
        'status': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'account': int,
        'password': int,
        'nickname': int,
        'salt': int,
        'created_at': int,
        'updated_at': int,
        'status': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'account',
    'password',
    'nickname',
    'salt',
    'created_at',
    'updated_at',
    'status',
]
UserScalarFieldKeys = Literal[
    'id',
    'account',
    'password',
    'nickname',
    'salt',
    'created_at',
    'updated_at',
    'status',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = _NoneType

# Dict types

class DictOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Dict create method"""
    id: _str
    status: _int
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]
    values: 'DictValuesCreateManyNestedWithoutRelationsInput'


class DictCreateInput(DictOptionalCreateInput):
    """Required arguments to the Dict create method"""
    main_code: _str
    sub_code: _str
    group: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class DictOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Dict create method, without relations"""
    id: _str
    status: _int
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]


class DictCreateWithoutRelationsInput(DictOptionalCreateWithoutRelationsInput):
    """Required arguments to the Dict create method, without relations"""
    main_code: _str
    sub_code: _str
    group: _str


class DictCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'DictCreateWithoutRelationsInput'
    connect: 'DictWhereUniqueInput'


class DictCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['DictCreateWithoutRelationsInput', List['DictCreateWithoutRelationsInput']]
    connect: Union['DictWhereUniqueInput', List['DictWhereUniqueInput']]


_DictWhereUnique_id_Input = TypedDict(
    '_DictWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_DictCompoundmain_code_sub_codeKeyInner = TypedDict(
    '_DictCompoundmain_code_sub_codeKeyInner',
    {
        'main_code': '_str',
        'sub_code': '_str',
    },
    total=True
)

_DictCompoundmain_code_sub_codeKey = TypedDict(
    '_DictCompoundmain_code_sub_codeKey',
    {
        'main_code_sub_code': '_DictCompoundmain_code_sub_codeKeyInner',
    },
    total=True
)

DictWhereUniqueInput = Union[
    '_DictWhereUnique_id_Input',
    '_DictCompoundmain_code_sub_codeKey',
]


class DictUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    main_code: _str
    sub_code: _str
    group: _str
    status: Union[AtomicIntInput, _int]
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]
    values: 'DictValuesUpdateManyWithoutRelationsInput'


class DictUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    main_code: _str
    sub_code: _str
    group: _str
    status: Union[AtomicIntInput, _int]
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]


class DictUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['DictCreateWithoutRelationsInput']
    connect: List['DictWhereUniqueInput']
    set: List['DictWhereUniqueInput']
    disconnect: List['DictWhereUniqueInput']
    delete: List['DictWhereUniqueInput']

    # TODO
    # update: List['DictUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['DictUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['DictScalarWhereInput']
    # upsert: List['DictUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['DictCreateOrConnectWithoutRelationsInput']


class DictUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'DictCreateWithoutRelationsInput'
    connect: 'DictWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'DictUpdateInput'
    # upsert: 'DictUpsertWithoutRelationsInput'
    # connectOrCreate: 'DictCreateOrConnectWithoutRelationsInput'


class DictUpsertInput(TypedDict):
    create: 'DictCreateInput'
    update: 'DictUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Dict_id_OrderByInput = TypedDict(
    '_Dict_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Dict_main_code_OrderByInput = TypedDict(
    '_Dict_main_code_OrderByInput',
    {
        'main_code': 'SortOrder',
    },
    total=True
)

_Dict_sub_code_OrderByInput = TypedDict(
    '_Dict_sub_code_OrderByInput',
    {
        'sub_code': 'SortOrder',
    },
    total=True
)

_Dict_group_OrderByInput = TypedDict(
    '_Dict_group_OrderByInput',
    {
        'group': 'SortOrder',
    },
    total=True
)

_Dict_status_OrderByInput = TypedDict(
    '_Dict_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_Dict_created_at_OrderByInput = TypedDict(
    '_Dict_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_Dict_updated_at_OrderByInput = TypedDict(
    '_Dict_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

DictOrderByInput = Union[
    '_Dict_id_OrderByInput',
    '_Dict_main_code_OrderByInput',
    '_Dict_sub_code_OrderByInput',
    '_Dict_group_OrderByInput',
    '_Dict_status_OrderByInput',
    '_Dict_created_at_OrderByInput',
    '_Dict_updated_at_OrderByInput',
]



# recursive Dict types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

DictRelationFilter = TypedDict(
    'DictRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class DictListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class DictInclude(TypedDict, total=False):
    """Dict relational arguments"""
    values: Union[bool, 'FindManyDictValuesArgsFromDict']


    

class UserIncludeFromDict(TypedDict, total=False):
    """Relational arguments for Dict"""


class UserIncludeFromDictRecursive1(TypedDict, total=False):
    """Relational arguments for Dict"""


class UserIncludeFromDictRecursive2(TypedDict, total=False):
    """Relational arguments for Dict"""


class UserIncludeFromDictRecursive3(TypedDict, total=False):
    """Relational arguments for Dict"""


class UserIncludeFromDictRecursive4(TypedDict, total=False):
    """Relational arguments for Dict"""

    

class UserArgsFromDict(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromDictRecursive1(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromDictRecursive2(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromDictRecursive3(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromDictRecursive4(TypedDict, total=False):
    """Arguments for Dict"""
    
    

class FindManyUserArgsFromDict(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromDictRecursive1(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromDictRecursive2(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromDictRecursive3(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromDictRecursive4(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class DictIncludeFromDict(TypedDict, total=False):
    """Relational arguments for Dict"""
    values: Union[bool, 'FindManyDictValuesArgsFromDictRecursive1']


class DictIncludeFromDictRecursive1(TypedDict, total=False):
    """Relational arguments for Dict"""
    values: Union[bool, 'FindManyDictValuesArgsFromDictRecursive2']


class DictIncludeFromDictRecursive2(TypedDict, total=False):
    """Relational arguments for Dict"""
    values: Union[bool, 'FindManyDictValuesArgsFromDictRecursive3']


class DictIncludeFromDictRecursive3(TypedDict, total=False):
    """Relational arguments for Dict"""
    values: Union[bool, 'FindManyDictValuesArgsFromDictRecursive4']


class DictIncludeFromDictRecursive4(TypedDict, total=False):
    """Relational arguments for Dict"""

    

class DictArgsFromDict(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'DictIncludeFromDictRecursive1'


class DictArgsFromDictRecursive1(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'DictIncludeFromDictRecursive2'


class DictArgsFromDictRecursive2(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'DictIncludeFromDictRecursive3'


class DictArgsFromDictRecursive3(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'DictIncludeFromDictRecursive4'


class DictArgsFromDictRecursive4(TypedDict, total=False):
    """Arguments for Dict"""
    
    

class FindManyDictArgsFromDict(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive1'


class FindManyDictArgsFromDictRecursive1(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive2'


class FindManyDictArgsFromDictRecursive2(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive3'


class FindManyDictArgsFromDictRecursive3(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive4'


class FindManyDictArgsFromDictRecursive4(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    
    

class DictValuesIncludeFromDict(TypedDict, total=False):
    """Relational arguments for Dict"""
    Dict: Union[bool, 'DictArgsFromDictRecursive1']


class DictValuesIncludeFromDictRecursive1(TypedDict, total=False):
    """Relational arguments for Dict"""
    Dict: Union[bool, 'DictArgsFromDictRecursive2']


class DictValuesIncludeFromDictRecursive2(TypedDict, total=False):
    """Relational arguments for Dict"""
    Dict: Union[bool, 'DictArgsFromDictRecursive3']


class DictValuesIncludeFromDictRecursive3(TypedDict, total=False):
    """Relational arguments for Dict"""
    Dict: Union[bool, 'DictArgsFromDictRecursive4']


class DictValuesIncludeFromDictRecursive4(TypedDict, total=False):
    """Relational arguments for Dict"""

    

class DictValuesArgsFromDict(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'DictValuesIncludeFromDictValuesRecursive1'


class DictValuesArgsFromDictRecursive1(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'DictValuesIncludeFromDictValuesRecursive2'


class DictValuesArgsFromDictRecursive2(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'DictValuesIncludeFromDictValuesRecursive3'


class DictValuesArgsFromDictRecursive3(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'DictValuesIncludeFromDictValuesRecursive4'


class DictValuesArgsFromDictRecursive4(TypedDict, total=False):
    """Arguments for Dict"""
    
    

class FindManyDictValuesArgsFromDict(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive1'


class FindManyDictValuesArgsFromDictRecursive1(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive2'


class FindManyDictValuesArgsFromDictRecursive2(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive3'


class FindManyDictValuesArgsFromDictRecursive3(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive4'


class FindManyDictValuesArgsFromDictRecursive4(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    
    

class PostIncludeFromDict(TypedDict, total=False):
    """Relational arguments for Dict"""
    tags: Union[bool, 'FindManyPostTagsArgsFromDictRecursive1']


class PostIncludeFromDictRecursive1(TypedDict, total=False):
    """Relational arguments for Dict"""
    tags: Union[bool, 'FindManyPostTagsArgsFromDictRecursive2']


class PostIncludeFromDictRecursive2(TypedDict, total=False):
    """Relational arguments for Dict"""
    tags: Union[bool, 'FindManyPostTagsArgsFromDictRecursive3']


class PostIncludeFromDictRecursive3(TypedDict, total=False):
    """Relational arguments for Dict"""
    tags: Union[bool, 'FindManyPostTagsArgsFromDictRecursive4']


class PostIncludeFromDictRecursive4(TypedDict, total=False):
    """Relational arguments for Dict"""

    

class PostArgsFromDict(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromDictRecursive1(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromDictRecursive2(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromDictRecursive3(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromDictRecursive4(TypedDict, total=False):
    """Arguments for Dict"""
    
    

class FindManyPostArgsFromDict(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromDictRecursive1(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromDictRecursive2(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromDictRecursive3(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromDictRecursive4(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    
    

class PostCateIncludeFromDict(TypedDict, total=False):
    """Relational arguments for Dict"""
    parent: Union[bool, 'PostCateArgsFromDictRecursive1']
    PostCate: Union[bool, 'FindManyPostCateArgsFromDictRecursive1']


class PostCateIncludeFromDictRecursive1(TypedDict, total=False):
    """Relational arguments for Dict"""
    parent: Union[bool, 'PostCateArgsFromDictRecursive2']
    PostCate: Union[bool, 'FindManyPostCateArgsFromDictRecursive2']


class PostCateIncludeFromDictRecursive2(TypedDict, total=False):
    """Relational arguments for Dict"""
    parent: Union[bool, 'PostCateArgsFromDictRecursive3']
    PostCate: Union[bool, 'FindManyPostCateArgsFromDictRecursive3']


class PostCateIncludeFromDictRecursive3(TypedDict, total=False):
    """Relational arguments for Dict"""
    parent: Union[bool, 'PostCateArgsFromDictRecursive4']
    PostCate: Union[bool, 'FindManyPostCateArgsFromDictRecursive4']


class PostCateIncludeFromDictRecursive4(TypedDict, total=False):
    """Relational arguments for Dict"""

    

class PostCateArgsFromDict(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'PostCateIncludeFromPostCateRecursive1'


class PostCateArgsFromDictRecursive1(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'PostCateIncludeFromPostCateRecursive2'


class PostCateArgsFromDictRecursive2(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'PostCateIncludeFromPostCateRecursive3'


class PostCateArgsFromDictRecursive3(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'PostCateIncludeFromPostCateRecursive4'


class PostCateArgsFromDictRecursive4(TypedDict, total=False):
    """Arguments for Dict"""
    
    

class FindManyPostCateArgsFromDict(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive1'


class FindManyPostCateArgsFromDictRecursive1(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive2'


class FindManyPostCateArgsFromDictRecursive2(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive3'


class FindManyPostCateArgsFromDictRecursive3(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive4'


class FindManyPostCateArgsFromDictRecursive4(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    
    

class PostTagsIncludeFromDict(TypedDict, total=False):
    """Relational arguments for Dict"""
    posts: Union[bool, 'FindManyPostArgsFromDictRecursive1']


class PostTagsIncludeFromDictRecursive1(TypedDict, total=False):
    """Relational arguments for Dict"""
    posts: Union[bool, 'FindManyPostArgsFromDictRecursive2']


class PostTagsIncludeFromDictRecursive2(TypedDict, total=False):
    """Relational arguments for Dict"""
    posts: Union[bool, 'FindManyPostArgsFromDictRecursive3']


class PostTagsIncludeFromDictRecursive3(TypedDict, total=False):
    """Relational arguments for Dict"""
    posts: Union[bool, 'FindManyPostArgsFromDictRecursive4']


class PostTagsIncludeFromDictRecursive4(TypedDict, total=False):
    """Relational arguments for Dict"""

    

class PostTagsArgsFromDict(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'PostTagsIncludeFromPostTagsRecursive1'


class PostTagsArgsFromDictRecursive1(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'PostTagsIncludeFromPostTagsRecursive2'


class PostTagsArgsFromDictRecursive2(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'PostTagsIncludeFromPostTagsRecursive3'


class PostTagsArgsFromDictRecursive3(TypedDict, total=False):
    """Arguments for Dict"""
    include: 'PostTagsIncludeFromPostTagsRecursive4'


class PostTagsArgsFromDictRecursive4(TypedDict, total=False):
    """Arguments for Dict"""
    
    

class FindManyPostTagsArgsFromDict(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive1'


class FindManyPostTagsArgsFromDictRecursive1(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive2'


class FindManyPostTagsArgsFromDictRecursive2(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive3'


class FindManyPostTagsArgsFromDictRecursive3(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive4'


class FindManyPostTagsArgsFromDictRecursive4(TypedDict, total=False):
    """Arguments for Dict"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    


FindManyDictArgs = FindManyDictArgsFromDict
FindFirstDictArgs = FindManyDictArgsFromDict


    

class DictWhereInput(TypedDict, total=False):
    """Dict arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    main_code: Union[_str, 'types.StringFilter']
    sub_code: Union[_str, 'types.StringFilter']
    group: Union[_str, 'types.StringFilter']
    status: Union[_int, 'types.IntFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    values: 'DictValuesListRelationFilter'

    # should be noted that AND and NOT should be Union['DictWhereInputRecursive1', List['DictWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['DictWhereInputRecursive1']
    OR: List['DictWhereInputRecursive1']
    NOT: List['DictWhereInputRecursive1']


class DictWhereInputRecursive1(TypedDict, total=False):
    """Dict arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    main_code: Union[_str, 'types.StringFilter']
    sub_code: Union[_str, 'types.StringFilter']
    group: Union[_str, 'types.StringFilter']
    status: Union[_int, 'types.IntFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    values: 'DictValuesListRelationFilter'

    # should be noted that AND and NOT should be Union['DictWhereInputRecursive2', List['DictWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['DictWhereInputRecursive2']
    OR: List['DictWhereInputRecursive2']
    NOT: List['DictWhereInputRecursive2']


class DictWhereInputRecursive2(TypedDict, total=False):
    """Dict arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    main_code: Union[_str, 'types.StringFilter']
    sub_code: Union[_str, 'types.StringFilter']
    group: Union[_str, 'types.StringFilter']
    status: Union[_int, 'types.IntFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    values: 'DictValuesListRelationFilter'

    # should be noted that AND and NOT should be Union['DictWhereInputRecursive3', List['DictWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['DictWhereInputRecursive3']
    OR: List['DictWhereInputRecursive3']
    NOT: List['DictWhereInputRecursive3']


class DictWhereInputRecursive3(TypedDict, total=False):
    """Dict arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    main_code: Union[_str, 'types.StringFilter']
    sub_code: Union[_str, 'types.StringFilter']
    group: Union[_str, 'types.StringFilter']
    status: Union[_int, 'types.IntFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    values: 'DictValuesListRelationFilter'

    # should be noted that AND and NOT should be Union['DictWhereInputRecursive4', List['DictWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['DictWhereInputRecursive4']
    OR: List['DictWhereInputRecursive4']
    NOT: List['DictWhereInputRecursive4']


class DictWhereInputRecursive4(TypedDict, total=False):
    """Dict arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    main_code: Union[_str, 'types.StringFilter']
    sub_code: Union[_str, 'types.StringFilter']
    group: Union[_str, 'types.StringFilter']
    status: Union[_int, 'types.IntFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    values: 'DictValuesListRelationFilter'



# aggregate Dict types


    

class DictScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Dict arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    main_code: Union[_str, 'types.StringWithAggregatesFilter']
    sub_code: Union[_str, 'types.StringWithAggregatesFilter']
    group: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DictScalarWhereWithAggregatesInputRecursive1']
    OR: List['DictScalarWhereWithAggregatesInputRecursive1']
    NOT: List['DictScalarWhereWithAggregatesInputRecursive1']


class DictScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Dict arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    main_code: Union[_str, 'types.StringWithAggregatesFilter']
    sub_code: Union[_str, 'types.StringWithAggregatesFilter']
    group: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DictScalarWhereWithAggregatesInputRecursive2']
    OR: List['DictScalarWhereWithAggregatesInputRecursive2']
    NOT: List['DictScalarWhereWithAggregatesInputRecursive2']


class DictScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Dict arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    main_code: Union[_str, 'types.StringWithAggregatesFilter']
    sub_code: Union[_str, 'types.StringWithAggregatesFilter']
    group: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DictScalarWhereWithAggregatesInputRecursive3']
    OR: List['DictScalarWhereWithAggregatesInputRecursive3']
    NOT: List['DictScalarWhereWithAggregatesInputRecursive3']


class DictScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Dict arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    main_code: Union[_str, 'types.StringWithAggregatesFilter']
    sub_code: Union[_str, 'types.StringWithAggregatesFilter']
    group: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['DictScalarWhereWithAggregatesInputRecursive4']
    OR: List['DictScalarWhereWithAggregatesInputRecursive4']
    NOT: List['DictScalarWhereWithAggregatesInputRecursive4']


class DictScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Dict arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    main_code: Union[_str, 'types.StringWithAggregatesFilter']
    sub_code: Union[_str, 'types.StringWithAggregatesFilter']
    group: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class DictGroupByOutput(TypedDict, total=False):
    id: _str
    main_code: _str
    sub_code: _str
    group: _str
    status: _int
    created_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'DictSumAggregateOutput'
    _avg: 'DictAvgAggregateOutput'
    _min: 'DictMinAggregateOutput'
    _max: 'DictMaxAggregateOutput'
    _count: 'DictCountAggregateOutput'


class DictAvgAggregateOutput(TypedDict, total=False):
    """Dict output for aggregating averages"""
    status: float


class DictSumAggregateOutput(TypedDict, total=False):
    """Dict output for aggregating sums"""
    status: _int


class DictScalarAggregateOutput(TypedDict, total=False):
    """Dict output including scalar fields"""
    id: _str
    main_code: _str
    sub_code: _str
    group: _str
    status: _int
    created_at: datetime.datetime
    updated_at: datetime.datetime


DictMinAggregateOutput = DictScalarAggregateOutput
DictMaxAggregateOutput = DictScalarAggregateOutput


class DictMaxAggregateInput(TypedDict, total=False):
    """Dict input for aggregating by max"""
    id: bool
    main_code: bool
    sub_code: bool
    group: bool
    status: bool
    created_at: bool
    updated_at: bool


class DictMinAggregateInput(TypedDict, total=False):
    """Dict input for aggregating by min"""
    id: bool
    main_code: bool
    sub_code: bool
    group: bool
    status: bool
    created_at: bool
    updated_at: bool


class DictNumberAggregateInput(TypedDict, total=False):
    """Dict input for aggregating numbers"""
    status: bool


DictAvgAggregateInput = DictNumberAggregateInput
DictSumAggregateInput = DictNumberAggregateInput


DictCountAggregateInput = TypedDict(
    'DictCountAggregateInput',
    {
        'id': bool,
        'main_code': bool,
        'sub_code': bool,
        'group': bool,
        'status': bool,
        'created_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

DictCountAggregateOutput = TypedDict(
    'DictCountAggregateOutput',
    {
        'id': int,
        'main_code': int,
        'sub_code': int,
        'group': int,
        'status': int,
        'created_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


DictKeys = Literal[
    'id',
    'main_code',
    'sub_code',
    'group',
    'status',
    'created_at',
    'updated_at',
    'values',
]
DictScalarFieldKeys = Literal[
    'id',
    'main_code',
    'sub_code',
    'group',
    'status',
    'created_at',
    'updated_at',
]
DictScalarFieldKeysT = TypeVar('DictScalarFieldKeysT', bound=DictScalarFieldKeys)

DictRelationalFieldKeys = Literal[
        'values',
    ]

# DictValues types

class DictValuesOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the DictValues create method"""
    id: _str
    value: Optional[_str]
    sort: _int
    type: _str
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]
    status: _int
    Dict: 'DictCreateNestedWithoutRelationsInput'
    dictId: _str


class DictValuesCreateInput(DictValuesOptionalCreateInput):
    """Required arguments to the DictValues create method"""
    code: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class DictValuesOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the DictValues create method, without relations"""
    id: _str
    value: Optional[_str]
    sort: _int
    type: _str
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]
    status: _int
    dictId: _str


class DictValuesCreateWithoutRelationsInput(DictValuesOptionalCreateWithoutRelationsInput):
    """Required arguments to the DictValues create method, without relations"""
    code: _str


class DictValuesCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'DictValuesCreateWithoutRelationsInput'
    connect: 'DictValuesWhereUniqueInput'


class DictValuesCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['DictValuesCreateWithoutRelationsInput', List['DictValuesCreateWithoutRelationsInput']]
    connect: Union['DictValuesWhereUniqueInput', List['DictValuesWhereUniqueInput']]


_DictValuesWhereUnique_id_Input = TypedDict(
    '_DictValuesWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_DictValuesCompoundcode_dictIdKeyInner = TypedDict(
    '_DictValuesCompoundcode_dictIdKeyInner',
    {
        'code': '_str',
        'dictId': '_str',
    },
    total=True
)

_DictValuesCompoundcode_dictIdKey = TypedDict(
    '_DictValuesCompoundcode_dictIdKey',
    {
        'code_dictId': '_DictValuesCompoundcode_dictIdKeyInner',
    },
    total=True
)

DictValuesWhereUniqueInput = Union[
    '_DictValuesWhereUnique_id_Input',
    '_DictValuesCompoundcode_dictIdKey',
]


class DictValuesUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    code: _str
    value: Optional[_str]
    sort: Union[AtomicIntInput, _int]
    type: _str
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]
    status: Union[AtomicIntInput, _int]
    Dict: 'DictUpdateOneWithoutRelationsInput'


class DictValuesUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    code: _str
    value: Optional[_str]
    sort: Union[AtomicIntInput, _int]
    type: _str
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]
    status: Union[AtomicIntInput, _int]


class DictValuesUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['DictValuesCreateWithoutRelationsInput']
    connect: List['DictValuesWhereUniqueInput']
    set: List['DictValuesWhereUniqueInput']
    disconnect: List['DictValuesWhereUniqueInput']
    delete: List['DictValuesWhereUniqueInput']

    # TODO
    # update: List['DictValuesUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['DictValuesUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['DictValuesScalarWhereInput']
    # upsert: List['DictValuesUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['DictValuesCreateOrConnectWithoutRelationsInput']


class DictValuesUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'DictValuesCreateWithoutRelationsInput'
    connect: 'DictValuesWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'DictValuesUpdateInput'
    # upsert: 'DictValuesUpsertWithoutRelationsInput'
    # connectOrCreate: 'DictValuesCreateOrConnectWithoutRelationsInput'


class DictValuesUpsertInput(TypedDict):
    create: 'DictValuesCreateInput'
    update: 'DictValuesUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_DictValues_id_OrderByInput = TypedDict(
    '_DictValues_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_DictValues_code_OrderByInput = TypedDict(
    '_DictValues_code_OrderByInput',
    {
        'code': 'SortOrder',
    },
    total=True
)

_DictValues_value_OrderByInput = TypedDict(
    '_DictValues_value_OrderByInput',
    {
        'value': 'SortOrder',
    },
    total=True
)

_DictValues_sort_OrderByInput = TypedDict(
    '_DictValues_sort_OrderByInput',
    {
        'sort': 'SortOrder',
    },
    total=True
)

_DictValues_type_OrderByInput = TypedDict(
    '_DictValues_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_DictValues_created_at_OrderByInput = TypedDict(
    '_DictValues_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_DictValues_updated_at_OrderByInput = TypedDict(
    '_DictValues_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

_DictValues_status_OrderByInput = TypedDict(
    '_DictValues_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_DictValues_dictId_OrderByInput = TypedDict(
    '_DictValues_dictId_OrderByInput',
    {
        'dictId': 'SortOrder',
    },
    total=True
)

DictValuesOrderByInput = Union[
    '_DictValues_id_OrderByInput',
    '_DictValues_code_OrderByInput',
    '_DictValues_value_OrderByInput',
    '_DictValues_sort_OrderByInput',
    '_DictValues_type_OrderByInput',
    '_DictValues_created_at_OrderByInput',
    '_DictValues_updated_at_OrderByInput',
    '_DictValues_status_OrderByInput',
    '_DictValues_dictId_OrderByInput',
]



# recursive DictValues types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

DictValuesRelationFilter = TypedDict(
    'DictValuesRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class DictValuesListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class DictValuesInclude(TypedDict, total=False):
    """DictValues relational arguments"""
    Dict: Union[bool, 'DictArgsFromDictValues']


    

class UserIncludeFromDictValues(TypedDict, total=False):
    """Relational arguments for DictValues"""


class UserIncludeFromDictValuesRecursive1(TypedDict, total=False):
    """Relational arguments for DictValues"""


class UserIncludeFromDictValuesRecursive2(TypedDict, total=False):
    """Relational arguments for DictValues"""


class UserIncludeFromDictValuesRecursive3(TypedDict, total=False):
    """Relational arguments for DictValues"""


class UserIncludeFromDictValuesRecursive4(TypedDict, total=False):
    """Relational arguments for DictValues"""

    

class UserArgsFromDictValues(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromDictValuesRecursive1(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromDictValuesRecursive2(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromDictValuesRecursive3(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromDictValuesRecursive4(TypedDict, total=False):
    """Arguments for DictValues"""
    
    

class FindManyUserArgsFromDictValues(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromDictValuesRecursive1(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromDictValuesRecursive2(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromDictValuesRecursive3(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromDictValuesRecursive4(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class DictIncludeFromDictValues(TypedDict, total=False):
    """Relational arguments for DictValues"""
    values: Union[bool, 'FindManyDictValuesArgsFromDictValuesRecursive1']


class DictIncludeFromDictValuesRecursive1(TypedDict, total=False):
    """Relational arguments for DictValues"""
    values: Union[bool, 'FindManyDictValuesArgsFromDictValuesRecursive2']


class DictIncludeFromDictValuesRecursive2(TypedDict, total=False):
    """Relational arguments for DictValues"""
    values: Union[bool, 'FindManyDictValuesArgsFromDictValuesRecursive3']


class DictIncludeFromDictValuesRecursive3(TypedDict, total=False):
    """Relational arguments for DictValues"""
    values: Union[bool, 'FindManyDictValuesArgsFromDictValuesRecursive4']


class DictIncludeFromDictValuesRecursive4(TypedDict, total=False):
    """Relational arguments for DictValues"""

    

class DictArgsFromDictValues(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'DictIncludeFromDictRecursive1'


class DictArgsFromDictValuesRecursive1(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'DictIncludeFromDictRecursive2'


class DictArgsFromDictValuesRecursive2(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'DictIncludeFromDictRecursive3'


class DictArgsFromDictValuesRecursive3(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'DictIncludeFromDictRecursive4'


class DictArgsFromDictValuesRecursive4(TypedDict, total=False):
    """Arguments for DictValues"""
    
    

class FindManyDictArgsFromDictValues(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive1'


class FindManyDictArgsFromDictValuesRecursive1(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive2'


class FindManyDictArgsFromDictValuesRecursive2(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive3'


class FindManyDictArgsFromDictValuesRecursive3(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive4'


class FindManyDictArgsFromDictValuesRecursive4(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    
    

class DictValuesIncludeFromDictValues(TypedDict, total=False):
    """Relational arguments for DictValues"""
    Dict: Union[bool, 'DictArgsFromDictValuesRecursive1']


class DictValuesIncludeFromDictValuesRecursive1(TypedDict, total=False):
    """Relational arguments for DictValues"""
    Dict: Union[bool, 'DictArgsFromDictValuesRecursive2']


class DictValuesIncludeFromDictValuesRecursive2(TypedDict, total=False):
    """Relational arguments for DictValues"""
    Dict: Union[bool, 'DictArgsFromDictValuesRecursive3']


class DictValuesIncludeFromDictValuesRecursive3(TypedDict, total=False):
    """Relational arguments for DictValues"""
    Dict: Union[bool, 'DictArgsFromDictValuesRecursive4']


class DictValuesIncludeFromDictValuesRecursive4(TypedDict, total=False):
    """Relational arguments for DictValues"""

    

class DictValuesArgsFromDictValues(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'DictValuesIncludeFromDictValuesRecursive1'


class DictValuesArgsFromDictValuesRecursive1(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'DictValuesIncludeFromDictValuesRecursive2'


class DictValuesArgsFromDictValuesRecursive2(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'DictValuesIncludeFromDictValuesRecursive3'


class DictValuesArgsFromDictValuesRecursive3(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'DictValuesIncludeFromDictValuesRecursive4'


class DictValuesArgsFromDictValuesRecursive4(TypedDict, total=False):
    """Arguments for DictValues"""
    
    

class FindManyDictValuesArgsFromDictValues(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive1'


class FindManyDictValuesArgsFromDictValuesRecursive1(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive2'


class FindManyDictValuesArgsFromDictValuesRecursive2(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive3'


class FindManyDictValuesArgsFromDictValuesRecursive3(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive4'


class FindManyDictValuesArgsFromDictValuesRecursive4(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    
    

class PostIncludeFromDictValues(TypedDict, total=False):
    """Relational arguments for DictValues"""
    tags: Union[bool, 'FindManyPostTagsArgsFromDictValuesRecursive1']


class PostIncludeFromDictValuesRecursive1(TypedDict, total=False):
    """Relational arguments for DictValues"""
    tags: Union[bool, 'FindManyPostTagsArgsFromDictValuesRecursive2']


class PostIncludeFromDictValuesRecursive2(TypedDict, total=False):
    """Relational arguments for DictValues"""
    tags: Union[bool, 'FindManyPostTagsArgsFromDictValuesRecursive3']


class PostIncludeFromDictValuesRecursive3(TypedDict, total=False):
    """Relational arguments for DictValues"""
    tags: Union[bool, 'FindManyPostTagsArgsFromDictValuesRecursive4']


class PostIncludeFromDictValuesRecursive4(TypedDict, total=False):
    """Relational arguments for DictValues"""

    

class PostArgsFromDictValues(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromDictValuesRecursive1(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromDictValuesRecursive2(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromDictValuesRecursive3(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromDictValuesRecursive4(TypedDict, total=False):
    """Arguments for DictValues"""
    
    

class FindManyPostArgsFromDictValues(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromDictValuesRecursive1(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromDictValuesRecursive2(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromDictValuesRecursive3(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromDictValuesRecursive4(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    
    

class PostCateIncludeFromDictValues(TypedDict, total=False):
    """Relational arguments for DictValues"""
    parent: Union[bool, 'PostCateArgsFromDictValuesRecursive1']
    PostCate: Union[bool, 'FindManyPostCateArgsFromDictValuesRecursive1']


class PostCateIncludeFromDictValuesRecursive1(TypedDict, total=False):
    """Relational arguments for DictValues"""
    parent: Union[bool, 'PostCateArgsFromDictValuesRecursive2']
    PostCate: Union[bool, 'FindManyPostCateArgsFromDictValuesRecursive2']


class PostCateIncludeFromDictValuesRecursive2(TypedDict, total=False):
    """Relational arguments for DictValues"""
    parent: Union[bool, 'PostCateArgsFromDictValuesRecursive3']
    PostCate: Union[bool, 'FindManyPostCateArgsFromDictValuesRecursive3']


class PostCateIncludeFromDictValuesRecursive3(TypedDict, total=False):
    """Relational arguments for DictValues"""
    parent: Union[bool, 'PostCateArgsFromDictValuesRecursive4']
    PostCate: Union[bool, 'FindManyPostCateArgsFromDictValuesRecursive4']


class PostCateIncludeFromDictValuesRecursive4(TypedDict, total=False):
    """Relational arguments for DictValues"""

    

class PostCateArgsFromDictValues(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'PostCateIncludeFromPostCateRecursive1'


class PostCateArgsFromDictValuesRecursive1(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'PostCateIncludeFromPostCateRecursive2'


class PostCateArgsFromDictValuesRecursive2(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'PostCateIncludeFromPostCateRecursive3'


class PostCateArgsFromDictValuesRecursive3(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'PostCateIncludeFromPostCateRecursive4'


class PostCateArgsFromDictValuesRecursive4(TypedDict, total=False):
    """Arguments for DictValues"""
    
    

class FindManyPostCateArgsFromDictValues(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive1'


class FindManyPostCateArgsFromDictValuesRecursive1(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive2'


class FindManyPostCateArgsFromDictValuesRecursive2(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive3'


class FindManyPostCateArgsFromDictValuesRecursive3(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive4'


class FindManyPostCateArgsFromDictValuesRecursive4(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    
    

class PostTagsIncludeFromDictValues(TypedDict, total=False):
    """Relational arguments for DictValues"""
    posts: Union[bool, 'FindManyPostArgsFromDictValuesRecursive1']


class PostTagsIncludeFromDictValuesRecursive1(TypedDict, total=False):
    """Relational arguments for DictValues"""
    posts: Union[bool, 'FindManyPostArgsFromDictValuesRecursive2']


class PostTagsIncludeFromDictValuesRecursive2(TypedDict, total=False):
    """Relational arguments for DictValues"""
    posts: Union[bool, 'FindManyPostArgsFromDictValuesRecursive3']


class PostTagsIncludeFromDictValuesRecursive3(TypedDict, total=False):
    """Relational arguments for DictValues"""
    posts: Union[bool, 'FindManyPostArgsFromDictValuesRecursive4']


class PostTagsIncludeFromDictValuesRecursive4(TypedDict, total=False):
    """Relational arguments for DictValues"""

    

class PostTagsArgsFromDictValues(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'PostTagsIncludeFromPostTagsRecursive1'


class PostTagsArgsFromDictValuesRecursive1(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'PostTagsIncludeFromPostTagsRecursive2'


class PostTagsArgsFromDictValuesRecursive2(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'PostTagsIncludeFromPostTagsRecursive3'


class PostTagsArgsFromDictValuesRecursive3(TypedDict, total=False):
    """Arguments for DictValues"""
    include: 'PostTagsIncludeFromPostTagsRecursive4'


class PostTagsArgsFromDictValuesRecursive4(TypedDict, total=False):
    """Arguments for DictValues"""
    
    

class FindManyPostTagsArgsFromDictValues(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive1'


class FindManyPostTagsArgsFromDictValuesRecursive1(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive2'


class FindManyPostTagsArgsFromDictValuesRecursive2(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive3'


class FindManyPostTagsArgsFromDictValuesRecursive3(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive4'


class FindManyPostTagsArgsFromDictValuesRecursive4(TypedDict, total=False):
    """Arguments for DictValues"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    


FindManyDictValuesArgs = FindManyDictValuesArgsFromDictValues
FindFirstDictValuesArgs = FindManyDictValuesArgsFromDictValues


    

class DictValuesWhereInput(TypedDict, total=False):
    """DictValues arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    value: Union[None, _str, 'types.StringFilter']
    sort: Union[_int, 'types.IntFilter']
    type: Union[_str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: Union[_int, 'types.IntFilter']
    Dict: 'DictRelationFilter'
    dictId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['DictValuesWhereInputRecursive1', List['DictValuesWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['DictValuesWhereInputRecursive1']
    OR: List['DictValuesWhereInputRecursive1']
    NOT: List['DictValuesWhereInputRecursive1']


class DictValuesWhereInputRecursive1(TypedDict, total=False):
    """DictValues arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    value: Union[None, _str, 'types.StringFilter']
    sort: Union[_int, 'types.IntFilter']
    type: Union[_str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: Union[_int, 'types.IntFilter']
    Dict: 'DictRelationFilter'
    dictId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['DictValuesWhereInputRecursive2', List['DictValuesWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['DictValuesWhereInputRecursive2']
    OR: List['DictValuesWhereInputRecursive2']
    NOT: List['DictValuesWhereInputRecursive2']


class DictValuesWhereInputRecursive2(TypedDict, total=False):
    """DictValues arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    value: Union[None, _str, 'types.StringFilter']
    sort: Union[_int, 'types.IntFilter']
    type: Union[_str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: Union[_int, 'types.IntFilter']
    Dict: 'DictRelationFilter'
    dictId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['DictValuesWhereInputRecursive3', List['DictValuesWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['DictValuesWhereInputRecursive3']
    OR: List['DictValuesWhereInputRecursive3']
    NOT: List['DictValuesWhereInputRecursive3']


class DictValuesWhereInputRecursive3(TypedDict, total=False):
    """DictValues arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    value: Union[None, _str, 'types.StringFilter']
    sort: Union[_int, 'types.IntFilter']
    type: Union[_str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: Union[_int, 'types.IntFilter']
    Dict: 'DictRelationFilter'
    dictId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['DictValuesWhereInputRecursive4', List['DictValuesWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['DictValuesWhereInputRecursive4']
    OR: List['DictValuesWhereInputRecursive4']
    NOT: List['DictValuesWhereInputRecursive4']


class DictValuesWhereInputRecursive4(TypedDict, total=False):
    """DictValues arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    value: Union[None, _str, 'types.StringFilter']
    sort: Union[_int, 'types.IntFilter']
    type: Union[_str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: Union[_int, 'types.IntFilter']
    Dict: 'DictRelationFilter'
    dictId: Union[_str, 'types.StringFilter']



# aggregate DictValues types


    

class DictValuesScalarWhereWithAggregatesInput(TypedDict, total=False):
    """DictValues arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    value: Union[_str, 'types.StringWithAggregatesFilter']
    sort: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']
    dictId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['DictValuesScalarWhereWithAggregatesInputRecursive1']
    OR: List['DictValuesScalarWhereWithAggregatesInputRecursive1']
    NOT: List['DictValuesScalarWhereWithAggregatesInputRecursive1']


class DictValuesScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """DictValues arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    value: Union[_str, 'types.StringWithAggregatesFilter']
    sort: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']
    dictId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['DictValuesScalarWhereWithAggregatesInputRecursive2']
    OR: List['DictValuesScalarWhereWithAggregatesInputRecursive2']
    NOT: List['DictValuesScalarWhereWithAggregatesInputRecursive2']


class DictValuesScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """DictValues arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    value: Union[_str, 'types.StringWithAggregatesFilter']
    sort: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']
    dictId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['DictValuesScalarWhereWithAggregatesInputRecursive3']
    OR: List['DictValuesScalarWhereWithAggregatesInputRecursive3']
    NOT: List['DictValuesScalarWhereWithAggregatesInputRecursive3']


class DictValuesScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """DictValues arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    value: Union[_str, 'types.StringWithAggregatesFilter']
    sort: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']
    dictId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['DictValuesScalarWhereWithAggregatesInputRecursive4']
    OR: List['DictValuesScalarWhereWithAggregatesInputRecursive4']
    NOT: List['DictValuesScalarWhereWithAggregatesInputRecursive4']


class DictValuesScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """DictValues arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    value: Union[_str, 'types.StringWithAggregatesFilter']
    sort: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']
    dictId: Union[_str, 'types.StringWithAggregatesFilter']



class DictValuesGroupByOutput(TypedDict, total=False):
    id: _str
    code: _str
    value: _str
    sort: _int
    type: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    status: _int
    dictId: _str
    _sum: 'DictValuesSumAggregateOutput'
    _avg: 'DictValuesAvgAggregateOutput'
    _min: 'DictValuesMinAggregateOutput'
    _max: 'DictValuesMaxAggregateOutput'
    _count: 'DictValuesCountAggregateOutput'


class DictValuesAvgAggregateOutput(TypedDict, total=False):
    """DictValues output for aggregating averages"""
    sort: float
    status: float


class DictValuesSumAggregateOutput(TypedDict, total=False):
    """DictValues output for aggregating sums"""
    sort: _int
    status: _int


class DictValuesScalarAggregateOutput(TypedDict, total=False):
    """DictValues output including scalar fields"""
    id: _str
    code: _str
    value: _str
    sort: _int
    type: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    status: _int
    dictId: _str


DictValuesMinAggregateOutput = DictValuesScalarAggregateOutput
DictValuesMaxAggregateOutput = DictValuesScalarAggregateOutput


class DictValuesMaxAggregateInput(TypedDict, total=False):
    """DictValues input for aggregating by max"""
    id: bool
    code: bool
    value: bool
    sort: bool
    type: bool
    created_at: bool
    updated_at: bool
    status: bool
    dictId: bool


class DictValuesMinAggregateInput(TypedDict, total=False):
    """DictValues input for aggregating by min"""
    id: bool
    code: bool
    value: bool
    sort: bool
    type: bool
    created_at: bool
    updated_at: bool
    status: bool
    dictId: bool


class DictValuesNumberAggregateInput(TypedDict, total=False):
    """DictValues input for aggregating numbers"""
    sort: bool
    status: bool


DictValuesAvgAggregateInput = DictValuesNumberAggregateInput
DictValuesSumAggregateInput = DictValuesNumberAggregateInput


DictValuesCountAggregateInput = TypedDict(
    'DictValuesCountAggregateInput',
    {
        'id': bool,
        'code': bool,
        'value': bool,
        'sort': bool,
        'type': bool,
        'created_at': bool,
        'updated_at': bool,
        'status': bool,
        'dictId': bool,
        '_all': bool,
    },
    total=False,
)

DictValuesCountAggregateOutput = TypedDict(
    'DictValuesCountAggregateOutput',
    {
        'id': int,
        'code': int,
        'value': int,
        'sort': int,
        'type': int,
        'created_at': int,
        'updated_at': int,
        'status': int,
        'dictId': int,
        '_all': int,
    },
    total=False,
)


DictValuesKeys = Literal[
    'id',
    'code',
    'value',
    'sort',
    'type',
    'created_at',
    'updated_at',
    'status',
    'Dict',
    'dictId',
]
DictValuesScalarFieldKeys = Literal[
    'id',
    'code',
    'value',
    'sort',
    'type',
    'created_at',
    'updated_at',
    'status',
    'dictId',
]
DictValuesScalarFieldKeysT = TypeVar('DictValuesScalarFieldKeysT', bound=DictValuesScalarFieldKeys)

DictValuesRelationalFieldKeys = Literal[
        'Dict',
    ]

# Post types

class PostOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Post create method"""
    id: _str
    content: Optional[_str]
    is_deploy: _bool
    created_by: Optional[_str]
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]
    deploy_at: Optional[datetime.datetime]
    status: _int
    tags: 'PostTagsCreateManyNestedWithoutRelationsInput'


class PostCreateInput(PostOptionalCreateInput):
    """Required arguments to the Post create method"""
    title: _str
    code: _str
    userId: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PostOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Post create method, without relations"""
    id: _str
    content: Optional[_str]
    is_deploy: _bool
    created_by: Optional[_str]
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]
    deploy_at: Optional[datetime.datetime]
    status: _int


class PostCreateWithoutRelationsInput(PostOptionalCreateWithoutRelationsInput):
    """Required arguments to the Post create method, without relations"""
    title: _str
    code: _str
    userId: _str


class PostCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PostCreateWithoutRelationsInput'
    connect: 'PostWhereUniqueInput'


class PostCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PostCreateWithoutRelationsInput', List['PostCreateWithoutRelationsInput']]
    connect: Union['PostWhereUniqueInput', List['PostWhereUniqueInput']]


_PostWhereUnique_id_Input = TypedDict(
    '_PostWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

PostWhereUniqueInput = _PostWhereUnique_id_Input


class PostUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    title: _str
    code: _str
    content: Optional[_str]
    is_deploy: _bool
    created_by: Optional[_str]
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]
    deploy_at: Optional[datetime.datetime]
    userId: _str
    status: Union[AtomicIntInput, _int]
    tags: 'PostTagsUpdateManyWithoutRelationsInput'


class PostUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    title: _str
    code: _str
    content: Optional[_str]
    is_deploy: _bool
    created_by: Optional[_str]
    created_at: Optional[datetime.datetime]
    updated_at: Optional[datetime.datetime]
    deploy_at: Optional[datetime.datetime]
    userId: _str
    status: Union[AtomicIntInput, _int]


class PostUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PostCreateWithoutRelationsInput']
    connect: List['PostWhereUniqueInput']
    set: List['PostWhereUniqueInput']
    disconnect: List['PostWhereUniqueInput']
    delete: List['PostWhereUniqueInput']

    # TODO
    # update: List['PostUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PostUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PostScalarWhereInput']
    # upsert: List['PostUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['PostCreateOrConnectWithoutRelationsInput']


class PostUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PostCreateWithoutRelationsInput'
    connect: 'PostWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PostUpdateInput'
    # upsert: 'PostUpsertWithoutRelationsInput'
    # connectOrCreate: 'PostCreateOrConnectWithoutRelationsInput'


class PostUpsertInput(TypedDict):
    create: 'PostCreateInput'
    update: 'PostUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Post_id_OrderByInput = TypedDict(
    '_Post_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Post_title_OrderByInput = TypedDict(
    '_Post_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Post_code_OrderByInput = TypedDict(
    '_Post_code_OrderByInput',
    {
        'code': 'SortOrder',
    },
    total=True
)

_Post_content_OrderByInput = TypedDict(
    '_Post_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_Post_is_deploy_OrderByInput = TypedDict(
    '_Post_is_deploy_OrderByInput',
    {
        'is_deploy': 'SortOrder',
    },
    total=True
)

_Post_created_by_OrderByInput = TypedDict(
    '_Post_created_by_OrderByInput',
    {
        'created_by': 'SortOrder',
    },
    total=True
)

_Post_created_at_OrderByInput = TypedDict(
    '_Post_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_Post_updated_at_OrderByInput = TypedDict(
    '_Post_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

_Post_deploy_at_OrderByInput = TypedDict(
    '_Post_deploy_at_OrderByInput',
    {
        'deploy_at': 'SortOrder',
    },
    total=True
)

_Post_userId_OrderByInput = TypedDict(
    '_Post_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Post_status_OrderByInput = TypedDict(
    '_Post_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

PostOrderByInput = Union[
    '_Post_id_OrderByInput',
    '_Post_title_OrderByInput',
    '_Post_code_OrderByInput',
    '_Post_content_OrderByInput',
    '_Post_is_deploy_OrderByInput',
    '_Post_created_by_OrderByInput',
    '_Post_created_at_OrderByInput',
    '_Post_updated_at_OrderByInput',
    '_Post_deploy_at_OrderByInput',
    '_Post_userId_OrderByInput',
    '_Post_status_OrderByInput',
]



# recursive Post types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PostRelationFilter = TypedDict(
    'PostRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PostListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PostInclude(TypedDict, total=False):
    """Post relational arguments"""
    tags: Union[bool, 'FindManyPostTagsArgsFromPost']


    

class UserIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""


class UserIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""


class UserIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""


class UserIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""


class UserIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class UserArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyUserArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class DictIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    values: Union[bool, 'FindManyDictValuesArgsFromPostRecursive1']


class DictIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    values: Union[bool, 'FindManyDictValuesArgsFromPostRecursive2']


class DictIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    values: Union[bool, 'FindManyDictValuesArgsFromPostRecursive3']


class DictIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    values: Union[bool, 'FindManyDictValuesArgsFromPostRecursive4']


class DictIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class DictArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'DictIncludeFromDictRecursive1'


class DictArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'DictIncludeFromDictRecursive2'


class DictArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'DictIncludeFromDictRecursive3'


class DictArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'DictIncludeFromDictRecursive4'


class DictArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyDictArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive1'


class FindManyDictArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive2'


class FindManyDictArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive3'


class FindManyDictArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive4'


class FindManyDictArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    
    

class DictValuesIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    Dict: Union[bool, 'DictArgsFromPostRecursive1']


class DictValuesIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    Dict: Union[bool, 'DictArgsFromPostRecursive2']


class DictValuesIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    Dict: Union[bool, 'DictArgsFromPostRecursive3']


class DictValuesIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    Dict: Union[bool, 'DictArgsFromPostRecursive4']


class DictValuesIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class DictValuesArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'DictValuesIncludeFromDictValuesRecursive1'


class DictValuesArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'DictValuesIncludeFromDictValuesRecursive2'


class DictValuesArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'DictValuesIncludeFromDictValuesRecursive3'


class DictValuesArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'DictValuesIncludeFromDictValuesRecursive4'


class DictValuesArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyDictValuesArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive1'


class FindManyDictValuesArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive2'


class FindManyDictValuesArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive3'


class FindManyDictValuesArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive4'


class FindManyDictValuesArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    
    

class PostIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    tags: Union[bool, 'FindManyPostTagsArgsFromPostRecursive1']


class PostIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    tags: Union[bool, 'FindManyPostTagsArgsFromPostRecursive2']


class PostIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    tags: Union[bool, 'FindManyPostTagsArgsFromPostRecursive3']


class PostIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    tags: Union[bool, 'FindManyPostTagsArgsFromPostRecursive4']


class PostIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class PostArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyPostArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    
    

class PostCateIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    parent: Union[bool, 'PostCateArgsFromPostRecursive1']
    PostCate: Union[bool, 'FindManyPostCateArgsFromPostRecursive1']


class PostCateIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    parent: Union[bool, 'PostCateArgsFromPostRecursive2']
    PostCate: Union[bool, 'FindManyPostCateArgsFromPostRecursive2']


class PostCateIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    parent: Union[bool, 'PostCateArgsFromPostRecursive3']
    PostCate: Union[bool, 'FindManyPostCateArgsFromPostRecursive3']


class PostCateIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    parent: Union[bool, 'PostCateArgsFromPostRecursive4']
    PostCate: Union[bool, 'FindManyPostCateArgsFromPostRecursive4']


class PostCateIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class PostCateArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostCateIncludeFromPostCateRecursive1'


class PostCateArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostCateIncludeFromPostCateRecursive2'


class PostCateArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostCateIncludeFromPostCateRecursive3'


class PostCateArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostCateIncludeFromPostCateRecursive4'


class PostCateArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyPostCateArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive1'


class FindManyPostCateArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive2'


class FindManyPostCateArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive3'


class FindManyPostCateArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive4'


class FindManyPostCateArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    
    

class PostTagsIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive1']


class PostTagsIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive2']


class PostTagsIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive3']


class PostTagsIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive4']


class PostTagsIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class PostTagsArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostTagsIncludeFromPostTagsRecursive1'


class PostTagsArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostTagsIncludeFromPostTagsRecursive2'


class PostTagsArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostTagsIncludeFromPostTagsRecursive3'


class PostTagsArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostTagsIncludeFromPostTagsRecursive4'


class PostTagsArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyPostTagsArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive1'


class FindManyPostTagsArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive2'


class FindManyPostTagsArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive3'


class FindManyPostTagsArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive4'


class FindManyPostTagsArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    


FindManyPostArgs = FindManyPostArgsFromPost
FindFirstPostArgs = FindManyPostArgsFromPost


    

class PostWhereInput(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    content: Union[None, _str, 'types.StringFilter']
    is_deploy: Union[_bool, 'types.BooleanFilter']
    created_by: Union[None, _str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    deploy_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    status: Union[_int, 'types.IntFilter']
    tags: 'PostTagsListRelationFilter'

    # should be noted that AND and NOT should be Union['PostWhereInputRecursive1', List['PostWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PostWhereInputRecursive1']
    OR: List['PostWhereInputRecursive1']
    NOT: List['PostWhereInputRecursive1']


class PostWhereInputRecursive1(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    content: Union[None, _str, 'types.StringFilter']
    is_deploy: Union[_bool, 'types.BooleanFilter']
    created_by: Union[None, _str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    deploy_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    status: Union[_int, 'types.IntFilter']
    tags: 'PostTagsListRelationFilter'

    # should be noted that AND and NOT should be Union['PostWhereInputRecursive2', List['PostWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PostWhereInputRecursive2']
    OR: List['PostWhereInputRecursive2']
    NOT: List['PostWhereInputRecursive2']


class PostWhereInputRecursive2(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    content: Union[None, _str, 'types.StringFilter']
    is_deploy: Union[_bool, 'types.BooleanFilter']
    created_by: Union[None, _str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    deploy_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    status: Union[_int, 'types.IntFilter']
    tags: 'PostTagsListRelationFilter'

    # should be noted that AND and NOT should be Union['PostWhereInputRecursive3', List['PostWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PostWhereInputRecursive3']
    OR: List['PostWhereInputRecursive3']
    NOT: List['PostWhereInputRecursive3']


class PostWhereInputRecursive3(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    content: Union[None, _str, 'types.StringFilter']
    is_deploy: Union[_bool, 'types.BooleanFilter']
    created_by: Union[None, _str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    deploy_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    status: Union[_int, 'types.IntFilter']
    tags: 'PostTagsListRelationFilter'

    # should be noted that AND and NOT should be Union['PostWhereInputRecursive4', List['PostWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PostWhereInputRecursive4']
    OR: List['PostWhereInputRecursive4']
    NOT: List['PostWhereInputRecursive4']


class PostWhereInputRecursive4(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    content: Union[None, _str, 'types.StringFilter']
    is_deploy: Union[_bool, 'types.BooleanFilter']
    created_by: Union[None, _str, 'types.StringFilter']
    created_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    deploy_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    userId: Union[_str, 'types.StringFilter']
    status: Union[_int, 'types.IntFilter']
    tags: 'PostTagsListRelationFilter'



# aggregate Post types


    

class PostScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    is_deploy: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_by: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deploy_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['PostScalarWhereWithAggregatesInputRecursive1']
    OR: List['PostScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PostScalarWhereWithAggregatesInputRecursive1']


class PostScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    is_deploy: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_by: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deploy_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['PostScalarWhereWithAggregatesInputRecursive2']
    OR: List['PostScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PostScalarWhereWithAggregatesInputRecursive2']


class PostScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    is_deploy: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_by: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deploy_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['PostScalarWhereWithAggregatesInputRecursive3']
    OR: List['PostScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PostScalarWhereWithAggregatesInputRecursive3']


class PostScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    is_deploy: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_by: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deploy_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['PostScalarWhereWithAggregatesInputRecursive4']
    OR: List['PostScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PostScalarWhereWithAggregatesInputRecursive4']


class PostScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    is_deploy: Union[_bool, 'types.BooleanWithAggregatesFilter']
    created_by: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    deploy_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']



class PostGroupByOutput(TypedDict, total=False):
    id: _str
    title: _str
    code: _str
    content: _str
    is_deploy: _bool
    created_by: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deploy_at: datetime.datetime
    userId: _str
    status: _int
    _sum: 'PostSumAggregateOutput'
    _avg: 'PostAvgAggregateOutput'
    _min: 'PostMinAggregateOutput'
    _max: 'PostMaxAggregateOutput'
    _count: 'PostCountAggregateOutput'


class PostAvgAggregateOutput(TypedDict, total=False):
    """Post output for aggregating averages"""
    status: float


class PostSumAggregateOutput(TypedDict, total=False):
    """Post output for aggregating sums"""
    status: _int


class PostScalarAggregateOutput(TypedDict, total=False):
    """Post output including scalar fields"""
    id: _str
    title: _str
    code: _str
    content: _str
    is_deploy: _bool
    created_by: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    deploy_at: datetime.datetime
    userId: _str
    status: _int


PostMinAggregateOutput = PostScalarAggregateOutput
PostMaxAggregateOutput = PostScalarAggregateOutput


class PostMaxAggregateInput(TypedDict, total=False):
    """Post input for aggregating by max"""
    id: bool
    title: bool
    code: bool
    content: bool
    is_deploy: bool
    created_by: bool
    created_at: bool
    updated_at: bool
    deploy_at: bool
    userId: bool
    status: bool


class PostMinAggregateInput(TypedDict, total=False):
    """Post input for aggregating by min"""
    id: bool
    title: bool
    code: bool
    content: bool
    is_deploy: bool
    created_by: bool
    created_at: bool
    updated_at: bool
    deploy_at: bool
    userId: bool
    status: bool


class PostNumberAggregateInput(TypedDict, total=False):
    """Post input for aggregating numbers"""
    status: bool


PostAvgAggregateInput = PostNumberAggregateInput
PostSumAggregateInput = PostNumberAggregateInput


PostCountAggregateInput = TypedDict(
    'PostCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'code': bool,
        'content': bool,
        'is_deploy': bool,
        'created_by': bool,
        'created_at': bool,
        'updated_at': bool,
        'deploy_at': bool,
        'userId': bool,
        'status': bool,
        '_all': bool,
    },
    total=False,
)

PostCountAggregateOutput = TypedDict(
    'PostCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'code': int,
        'content': int,
        'is_deploy': int,
        'created_by': int,
        'created_at': int,
        'updated_at': int,
        'deploy_at': int,
        'userId': int,
        'status': int,
        '_all': int,
    },
    total=False,
)


PostKeys = Literal[
    'id',
    'title',
    'code',
    'content',
    'is_deploy',
    'created_by',
    'created_at',
    'updated_at',
    'deploy_at',
    'userId',
    'status',
    'tags',
]
PostScalarFieldKeys = Literal[
    'id',
    'title',
    'code',
    'content',
    'is_deploy',
    'created_by',
    'created_at',
    'updated_at',
    'deploy_at',
    'userId',
    'status',
]
PostScalarFieldKeysT = TypeVar('PostScalarFieldKeysT', bound=PostScalarFieldKeys)

PostRelationalFieldKeys = Literal[
        'tags',
    ]

# PostCate types

class PostCateOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the PostCate create method"""
    id: _str
    is_root: _bool
    parent: 'PostCateCreateNestedWithoutRelationsInput'
    status: _int
    PostCate: 'PostCateCreateManyNestedWithoutRelationsInput'
    postCateId: Optional[_str]


class PostCateCreateInput(PostCateOptionalCreateInput):
    """Required arguments to the PostCate create method"""
    title: _str
    code: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PostCateOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the PostCate create method, without relations"""
    id: _str
    is_root: _bool
    status: _int
    postCateId: Optional[_str]


class PostCateCreateWithoutRelationsInput(PostCateOptionalCreateWithoutRelationsInput):
    """Required arguments to the PostCate create method, without relations"""
    title: _str
    code: _str


class PostCateCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PostCateCreateWithoutRelationsInput'
    connect: 'PostCateWhereUniqueInput'


class PostCateCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PostCateCreateWithoutRelationsInput', List['PostCateCreateWithoutRelationsInput']]
    connect: Union['PostCateWhereUniqueInput', List['PostCateWhereUniqueInput']]


_PostCateWhereUnique_id_Input = TypedDict(
    '_PostCateWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

PostCateWhereUniqueInput = _PostCateWhereUnique_id_Input


class PostCateUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    title: _str
    code: _str
    is_root: _bool
    parent: 'PostCateUpdateOneWithoutRelationsInput'
    status: Union[AtomicIntInput, _int]
    PostCate: 'PostCateUpdateManyWithoutRelationsInput'


class PostCateUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    title: _str
    code: _str
    is_root: _bool
    status: Union[AtomicIntInput, _int]


class PostCateUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PostCateCreateWithoutRelationsInput']
    connect: List['PostCateWhereUniqueInput']
    set: List['PostCateWhereUniqueInput']
    disconnect: List['PostCateWhereUniqueInput']
    delete: List['PostCateWhereUniqueInput']

    # TODO
    # update: List['PostCateUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PostCateUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PostCateScalarWhereInput']
    # upsert: List['PostCateUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['PostCateCreateOrConnectWithoutRelationsInput']


class PostCateUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PostCateCreateWithoutRelationsInput'
    connect: 'PostCateWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PostCateUpdateInput'
    # upsert: 'PostCateUpsertWithoutRelationsInput'
    # connectOrCreate: 'PostCateCreateOrConnectWithoutRelationsInput'


class PostCateUpsertInput(TypedDict):
    create: 'PostCateCreateInput'
    update: 'PostCateUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_PostCate_id_OrderByInput = TypedDict(
    '_PostCate_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_PostCate_title_OrderByInput = TypedDict(
    '_PostCate_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_PostCate_code_OrderByInput = TypedDict(
    '_PostCate_code_OrderByInput',
    {
        'code': 'SortOrder',
    },
    total=True
)

_PostCate_is_root_OrderByInput = TypedDict(
    '_PostCate_is_root_OrderByInput',
    {
        'is_root': 'SortOrder',
    },
    total=True
)

_PostCate_status_OrderByInput = TypedDict(
    '_PostCate_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_PostCate_postCateId_OrderByInput = TypedDict(
    '_PostCate_postCateId_OrderByInput',
    {
        'postCateId': 'SortOrder',
    },
    total=True
)

PostCateOrderByInput = Union[
    '_PostCate_id_OrderByInput',
    '_PostCate_title_OrderByInput',
    '_PostCate_code_OrderByInput',
    '_PostCate_is_root_OrderByInput',
    '_PostCate_status_OrderByInput',
    '_PostCate_postCateId_OrderByInput',
]



# recursive PostCate types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PostCateRelationFilter = TypedDict(
    'PostCateRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PostCateListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PostCateInclude(TypedDict, total=False):
    """PostCate relational arguments"""
    parent: Union[bool, 'PostCateArgsFromPostCate']
    PostCate: Union[bool, 'FindManyPostCateArgsFromPostCate']


    

class UserIncludeFromPostCate(TypedDict, total=False):
    """Relational arguments for PostCate"""


class UserIncludeFromPostCateRecursive1(TypedDict, total=False):
    """Relational arguments for PostCate"""


class UserIncludeFromPostCateRecursive2(TypedDict, total=False):
    """Relational arguments for PostCate"""


class UserIncludeFromPostCateRecursive3(TypedDict, total=False):
    """Relational arguments for PostCate"""


class UserIncludeFromPostCateRecursive4(TypedDict, total=False):
    """Relational arguments for PostCate"""

    

class UserArgsFromPostCate(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPostCateRecursive1(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPostCateRecursive2(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromPostCateRecursive3(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromPostCateRecursive4(TypedDict, total=False):
    """Arguments for PostCate"""
    
    

class FindManyUserArgsFromPostCate(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPostCateRecursive1(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPostCateRecursive2(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromPostCateRecursive3(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromPostCateRecursive4(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class DictIncludeFromPostCate(TypedDict, total=False):
    """Relational arguments for PostCate"""
    values: Union[bool, 'FindManyDictValuesArgsFromPostCateRecursive1']


class DictIncludeFromPostCateRecursive1(TypedDict, total=False):
    """Relational arguments for PostCate"""
    values: Union[bool, 'FindManyDictValuesArgsFromPostCateRecursive2']


class DictIncludeFromPostCateRecursive2(TypedDict, total=False):
    """Relational arguments for PostCate"""
    values: Union[bool, 'FindManyDictValuesArgsFromPostCateRecursive3']


class DictIncludeFromPostCateRecursive3(TypedDict, total=False):
    """Relational arguments for PostCate"""
    values: Union[bool, 'FindManyDictValuesArgsFromPostCateRecursive4']


class DictIncludeFromPostCateRecursive4(TypedDict, total=False):
    """Relational arguments for PostCate"""

    

class DictArgsFromPostCate(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'DictIncludeFromDictRecursive1'


class DictArgsFromPostCateRecursive1(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'DictIncludeFromDictRecursive2'


class DictArgsFromPostCateRecursive2(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'DictIncludeFromDictRecursive3'


class DictArgsFromPostCateRecursive3(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'DictIncludeFromDictRecursive4'


class DictArgsFromPostCateRecursive4(TypedDict, total=False):
    """Arguments for PostCate"""
    
    

class FindManyDictArgsFromPostCate(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive1'


class FindManyDictArgsFromPostCateRecursive1(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive2'


class FindManyDictArgsFromPostCateRecursive2(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive3'


class FindManyDictArgsFromPostCateRecursive3(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive4'


class FindManyDictArgsFromPostCateRecursive4(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    
    

class DictValuesIncludeFromPostCate(TypedDict, total=False):
    """Relational arguments for PostCate"""
    Dict: Union[bool, 'DictArgsFromPostCateRecursive1']


class DictValuesIncludeFromPostCateRecursive1(TypedDict, total=False):
    """Relational arguments for PostCate"""
    Dict: Union[bool, 'DictArgsFromPostCateRecursive2']


class DictValuesIncludeFromPostCateRecursive2(TypedDict, total=False):
    """Relational arguments for PostCate"""
    Dict: Union[bool, 'DictArgsFromPostCateRecursive3']


class DictValuesIncludeFromPostCateRecursive3(TypedDict, total=False):
    """Relational arguments for PostCate"""
    Dict: Union[bool, 'DictArgsFromPostCateRecursive4']


class DictValuesIncludeFromPostCateRecursive4(TypedDict, total=False):
    """Relational arguments for PostCate"""

    

class DictValuesArgsFromPostCate(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'DictValuesIncludeFromDictValuesRecursive1'


class DictValuesArgsFromPostCateRecursive1(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'DictValuesIncludeFromDictValuesRecursive2'


class DictValuesArgsFromPostCateRecursive2(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'DictValuesIncludeFromDictValuesRecursive3'


class DictValuesArgsFromPostCateRecursive3(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'DictValuesIncludeFromDictValuesRecursive4'


class DictValuesArgsFromPostCateRecursive4(TypedDict, total=False):
    """Arguments for PostCate"""
    
    

class FindManyDictValuesArgsFromPostCate(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive1'


class FindManyDictValuesArgsFromPostCateRecursive1(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive2'


class FindManyDictValuesArgsFromPostCateRecursive2(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive3'


class FindManyDictValuesArgsFromPostCateRecursive3(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive4'


class FindManyDictValuesArgsFromPostCateRecursive4(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    
    

class PostIncludeFromPostCate(TypedDict, total=False):
    """Relational arguments for PostCate"""
    tags: Union[bool, 'FindManyPostTagsArgsFromPostCateRecursive1']


class PostIncludeFromPostCateRecursive1(TypedDict, total=False):
    """Relational arguments for PostCate"""
    tags: Union[bool, 'FindManyPostTagsArgsFromPostCateRecursive2']


class PostIncludeFromPostCateRecursive2(TypedDict, total=False):
    """Relational arguments for PostCate"""
    tags: Union[bool, 'FindManyPostTagsArgsFromPostCateRecursive3']


class PostIncludeFromPostCateRecursive3(TypedDict, total=False):
    """Relational arguments for PostCate"""
    tags: Union[bool, 'FindManyPostTagsArgsFromPostCateRecursive4']


class PostIncludeFromPostCateRecursive4(TypedDict, total=False):
    """Relational arguments for PostCate"""

    

class PostArgsFromPostCate(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromPostCateRecursive1(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromPostCateRecursive2(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromPostCateRecursive3(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromPostCateRecursive4(TypedDict, total=False):
    """Arguments for PostCate"""
    
    

class FindManyPostArgsFromPostCate(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromPostCateRecursive1(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromPostCateRecursive2(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromPostCateRecursive3(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromPostCateRecursive4(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    
    

class PostCateIncludeFromPostCate(TypedDict, total=False):
    """Relational arguments for PostCate"""
    parent: Union[bool, 'PostCateArgsFromPostCateRecursive1']
    PostCate: Union[bool, 'FindManyPostCateArgsFromPostCateRecursive1']


class PostCateIncludeFromPostCateRecursive1(TypedDict, total=False):
    """Relational arguments for PostCate"""
    parent: Union[bool, 'PostCateArgsFromPostCateRecursive2']
    PostCate: Union[bool, 'FindManyPostCateArgsFromPostCateRecursive2']


class PostCateIncludeFromPostCateRecursive2(TypedDict, total=False):
    """Relational arguments for PostCate"""
    parent: Union[bool, 'PostCateArgsFromPostCateRecursive3']
    PostCate: Union[bool, 'FindManyPostCateArgsFromPostCateRecursive3']


class PostCateIncludeFromPostCateRecursive3(TypedDict, total=False):
    """Relational arguments for PostCate"""
    parent: Union[bool, 'PostCateArgsFromPostCateRecursive4']
    PostCate: Union[bool, 'FindManyPostCateArgsFromPostCateRecursive4']


class PostCateIncludeFromPostCateRecursive4(TypedDict, total=False):
    """Relational arguments for PostCate"""

    

class PostCateArgsFromPostCate(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'PostCateIncludeFromPostCateRecursive1'


class PostCateArgsFromPostCateRecursive1(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'PostCateIncludeFromPostCateRecursive2'


class PostCateArgsFromPostCateRecursive2(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'PostCateIncludeFromPostCateRecursive3'


class PostCateArgsFromPostCateRecursive3(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'PostCateIncludeFromPostCateRecursive4'


class PostCateArgsFromPostCateRecursive4(TypedDict, total=False):
    """Arguments for PostCate"""
    
    

class FindManyPostCateArgsFromPostCate(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive1'


class FindManyPostCateArgsFromPostCateRecursive1(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive2'


class FindManyPostCateArgsFromPostCateRecursive2(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive3'


class FindManyPostCateArgsFromPostCateRecursive3(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive4'


class FindManyPostCateArgsFromPostCateRecursive4(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    
    

class PostTagsIncludeFromPostCate(TypedDict, total=False):
    """Relational arguments for PostCate"""
    posts: Union[bool, 'FindManyPostArgsFromPostCateRecursive1']


class PostTagsIncludeFromPostCateRecursive1(TypedDict, total=False):
    """Relational arguments for PostCate"""
    posts: Union[bool, 'FindManyPostArgsFromPostCateRecursive2']


class PostTagsIncludeFromPostCateRecursive2(TypedDict, total=False):
    """Relational arguments for PostCate"""
    posts: Union[bool, 'FindManyPostArgsFromPostCateRecursive3']


class PostTagsIncludeFromPostCateRecursive3(TypedDict, total=False):
    """Relational arguments for PostCate"""
    posts: Union[bool, 'FindManyPostArgsFromPostCateRecursive4']


class PostTagsIncludeFromPostCateRecursive4(TypedDict, total=False):
    """Relational arguments for PostCate"""

    

class PostTagsArgsFromPostCate(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'PostTagsIncludeFromPostTagsRecursive1'


class PostTagsArgsFromPostCateRecursive1(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'PostTagsIncludeFromPostTagsRecursive2'


class PostTagsArgsFromPostCateRecursive2(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'PostTagsIncludeFromPostTagsRecursive3'


class PostTagsArgsFromPostCateRecursive3(TypedDict, total=False):
    """Arguments for PostCate"""
    include: 'PostTagsIncludeFromPostTagsRecursive4'


class PostTagsArgsFromPostCateRecursive4(TypedDict, total=False):
    """Arguments for PostCate"""
    
    

class FindManyPostTagsArgsFromPostCate(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive1'


class FindManyPostTagsArgsFromPostCateRecursive1(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive2'


class FindManyPostTagsArgsFromPostCateRecursive2(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive3'


class FindManyPostTagsArgsFromPostCateRecursive3(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive4'


class FindManyPostTagsArgsFromPostCateRecursive4(TypedDict, total=False):
    """Arguments for PostCate"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    


FindManyPostCateArgs = FindManyPostCateArgsFromPostCate
FindFirstPostCateArgs = FindManyPostCateArgsFromPostCate


    

class PostCateWhereInput(TypedDict, total=False):
    """PostCate arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    is_root: Union[_bool, 'types.BooleanFilter']
    parent: 'PostCateRelationFilter'
    status: Union[_int, 'types.IntFilter']
    PostCate: 'PostCateListRelationFilter'
    postCateId: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['PostCateWhereInputRecursive1', List['PostCateWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PostCateWhereInputRecursive1']
    OR: List['PostCateWhereInputRecursive1']
    NOT: List['PostCateWhereInputRecursive1']


class PostCateWhereInputRecursive1(TypedDict, total=False):
    """PostCate arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    is_root: Union[_bool, 'types.BooleanFilter']
    parent: 'PostCateRelationFilter'
    status: Union[_int, 'types.IntFilter']
    PostCate: 'PostCateListRelationFilter'
    postCateId: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['PostCateWhereInputRecursive2', List['PostCateWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PostCateWhereInputRecursive2']
    OR: List['PostCateWhereInputRecursive2']
    NOT: List['PostCateWhereInputRecursive2']


class PostCateWhereInputRecursive2(TypedDict, total=False):
    """PostCate arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    is_root: Union[_bool, 'types.BooleanFilter']
    parent: 'PostCateRelationFilter'
    status: Union[_int, 'types.IntFilter']
    PostCate: 'PostCateListRelationFilter'
    postCateId: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['PostCateWhereInputRecursive3', List['PostCateWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PostCateWhereInputRecursive3']
    OR: List['PostCateWhereInputRecursive3']
    NOT: List['PostCateWhereInputRecursive3']


class PostCateWhereInputRecursive3(TypedDict, total=False):
    """PostCate arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    is_root: Union[_bool, 'types.BooleanFilter']
    parent: 'PostCateRelationFilter'
    status: Union[_int, 'types.IntFilter']
    PostCate: 'PostCateListRelationFilter'
    postCateId: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['PostCateWhereInputRecursive4', List['PostCateWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PostCateWhereInputRecursive4']
    OR: List['PostCateWhereInputRecursive4']
    NOT: List['PostCateWhereInputRecursive4']


class PostCateWhereInputRecursive4(TypedDict, total=False):
    """PostCate arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    is_root: Union[_bool, 'types.BooleanFilter']
    parent: 'PostCateRelationFilter'
    status: Union[_int, 'types.IntFilter']
    PostCate: 'PostCateListRelationFilter'
    postCateId: Union[None, _str, 'types.StringFilter']



# aggregate PostCate types


    

class PostCateScalarWhereWithAggregatesInput(TypedDict, total=False):
    """PostCate arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    is_root: Union[_bool, 'types.BooleanWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']
    postCateId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PostCateScalarWhereWithAggregatesInputRecursive1']
    OR: List['PostCateScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PostCateScalarWhereWithAggregatesInputRecursive1']


class PostCateScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """PostCate arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    is_root: Union[_bool, 'types.BooleanWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']
    postCateId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PostCateScalarWhereWithAggregatesInputRecursive2']
    OR: List['PostCateScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PostCateScalarWhereWithAggregatesInputRecursive2']


class PostCateScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """PostCate arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    is_root: Union[_bool, 'types.BooleanWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']
    postCateId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PostCateScalarWhereWithAggregatesInputRecursive3']
    OR: List['PostCateScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PostCateScalarWhereWithAggregatesInputRecursive3']


class PostCateScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """PostCate arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    is_root: Union[_bool, 'types.BooleanWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']
    postCateId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PostCateScalarWhereWithAggregatesInputRecursive4']
    OR: List['PostCateScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PostCateScalarWhereWithAggregatesInputRecursive4']


class PostCateScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """PostCate arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    is_root: Union[_bool, 'types.BooleanWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']
    postCateId: Union[_str, 'types.StringWithAggregatesFilter']



class PostCateGroupByOutput(TypedDict, total=False):
    id: _str
    title: _str
    code: _str
    is_root: _bool
    status: _int
    postCateId: _str
    _sum: 'PostCateSumAggregateOutput'
    _avg: 'PostCateAvgAggregateOutput'
    _min: 'PostCateMinAggregateOutput'
    _max: 'PostCateMaxAggregateOutput'
    _count: 'PostCateCountAggregateOutput'


class PostCateAvgAggregateOutput(TypedDict, total=False):
    """PostCate output for aggregating averages"""
    status: float


class PostCateSumAggregateOutput(TypedDict, total=False):
    """PostCate output for aggregating sums"""
    status: _int


class PostCateScalarAggregateOutput(TypedDict, total=False):
    """PostCate output including scalar fields"""
    id: _str
    title: _str
    code: _str
    is_root: _bool
    status: _int
    postCateId: _str


PostCateMinAggregateOutput = PostCateScalarAggregateOutput
PostCateMaxAggregateOutput = PostCateScalarAggregateOutput


class PostCateMaxAggregateInput(TypedDict, total=False):
    """PostCate input for aggregating by max"""
    id: bool
    title: bool
    code: bool
    is_root: bool
    status: bool
    postCateId: bool


class PostCateMinAggregateInput(TypedDict, total=False):
    """PostCate input for aggregating by min"""
    id: bool
    title: bool
    code: bool
    is_root: bool
    status: bool
    postCateId: bool


class PostCateNumberAggregateInput(TypedDict, total=False):
    """PostCate input for aggregating numbers"""
    status: bool


PostCateAvgAggregateInput = PostCateNumberAggregateInput
PostCateSumAggregateInput = PostCateNumberAggregateInput


PostCateCountAggregateInput = TypedDict(
    'PostCateCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'code': bool,
        'is_root': bool,
        'status': bool,
        'postCateId': bool,
        '_all': bool,
    },
    total=False,
)

PostCateCountAggregateOutput = TypedDict(
    'PostCateCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'code': int,
        'is_root': int,
        'status': int,
        'postCateId': int,
        '_all': int,
    },
    total=False,
)


PostCateKeys = Literal[
    'id',
    'title',
    'code',
    'is_root',
    'parent',
    'status',
    'PostCate',
    'postCateId',
]
PostCateScalarFieldKeys = Literal[
    'id',
    'title',
    'code',
    'is_root',
    'status',
    'postCateId',
]
PostCateScalarFieldKeysT = TypeVar('PostCateScalarFieldKeysT', bound=PostCateScalarFieldKeys)

PostCateRelationalFieldKeys = Literal[
        'parent',
        'PostCate',
    ]

# PostTags types

class PostTagsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the PostTags create method"""
    id: _str
    posts: 'PostCreateManyNestedWithoutRelationsInput'
    status: _int


class PostTagsCreateInput(PostTagsOptionalCreateInput):
    """Required arguments to the PostTags create method"""
    title: _str
    code: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PostTagsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the PostTags create method, without relations"""
    id: _str
    status: _int


class PostTagsCreateWithoutRelationsInput(PostTagsOptionalCreateWithoutRelationsInput):
    """Required arguments to the PostTags create method, without relations"""
    title: _str
    code: _str


class PostTagsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PostTagsCreateWithoutRelationsInput'
    connect: 'PostTagsWhereUniqueInput'


class PostTagsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PostTagsCreateWithoutRelationsInput', List['PostTagsCreateWithoutRelationsInput']]
    connect: Union['PostTagsWhereUniqueInput', List['PostTagsWhereUniqueInput']]


_PostTagsWhereUnique_id_Input = TypedDict(
    '_PostTagsWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_PostTagsWhereUnique_code_Input = TypedDict(
    '_PostTagsWhereUnique_code_Input',
    {
        'code': '_str',
    },
    total=True
)

_PostTagsCompoundcodeKeyInner = TypedDict(
    '_PostTagsCompoundcodeKeyInner',
    {
        'code': '_str',
    },
    total=True
)

_PostTagsCompoundcodeKey = TypedDict(
    '_PostTagsCompoundcodeKey',
    {
        'code': '_PostTagsCompoundcodeKeyInner',
    },
    total=True
)

PostTagsWhereUniqueInput = Union[
    '_PostTagsWhereUnique_id_Input',
    '_PostTagsWhereUnique_code_Input',
    '_PostTagsCompoundcodeKey',
]


class PostTagsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    title: _str
    code: _str
    posts: 'PostUpdateManyWithoutRelationsInput'
    status: Union[AtomicIntInput, _int]


class PostTagsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    title: _str
    code: _str
    status: Union[AtomicIntInput, _int]


class PostTagsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PostTagsCreateWithoutRelationsInput']
    connect: List['PostTagsWhereUniqueInput']
    set: List['PostTagsWhereUniqueInput']
    disconnect: List['PostTagsWhereUniqueInput']
    delete: List['PostTagsWhereUniqueInput']

    # TODO
    # update: List['PostTagsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PostTagsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PostTagsScalarWhereInput']
    # upsert: List['PostTagsUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['PostTagsCreateOrConnectWithoutRelationsInput']


class PostTagsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PostTagsCreateWithoutRelationsInput'
    connect: 'PostTagsWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PostTagsUpdateInput'
    # upsert: 'PostTagsUpsertWithoutRelationsInput'
    # connectOrCreate: 'PostTagsCreateOrConnectWithoutRelationsInput'


class PostTagsUpsertInput(TypedDict):
    create: 'PostTagsCreateInput'
    update: 'PostTagsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_PostTags_id_OrderByInput = TypedDict(
    '_PostTags_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_PostTags_title_OrderByInput = TypedDict(
    '_PostTags_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_PostTags_code_OrderByInput = TypedDict(
    '_PostTags_code_OrderByInput',
    {
        'code': 'SortOrder',
    },
    total=True
)

_PostTags_status_OrderByInput = TypedDict(
    '_PostTags_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

PostTagsOrderByInput = Union[
    '_PostTags_id_OrderByInput',
    '_PostTags_title_OrderByInput',
    '_PostTags_code_OrderByInput',
    '_PostTags_status_OrderByInput',
]



# recursive PostTags types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PostTagsRelationFilter = TypedDict(
    'PostTagsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PostTagsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PostTagsInclude(TypedDict, total=False):
    """PostTags relational arguments"""
    posts: Union[bool, 'FindManyPostArgsFromPostTags']


    

class UserIncludeFromPostTags(TypedDict, total=False):
    """Relational arguments for PostTags"""


class UserIncludeFromPostTagsRecursive1(TypedDict, total=False):
    """Relational arguments for PostTags"""


class UserIncludeFromPostTagsRecursive2(TypedDict, total=False):
    """Relational arguments for PostTags"""


class UserIncludeFromPostTagsRecursive3(TypedDict, total=False):
    """Relational arguments for PostTags"""


class UserIncludeFromPostTagsRecursive4(TypedDict, total=False):
    """Relational arguments for PostTags"""

    

class UserArgsFromPostTags(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPostTagsRecursive1(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPostTagsRecursive2(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromPostTagsRecursive3(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromPostTagsRecursive4(TypedDict, total=False):
    """Arguments for PostTags"""
    
    

class FindManyUserArgsFromPostTags(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPostTagsRecursive1(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPostTagsRecursive2(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromPostTagsRecursive3(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromPostTagsRecursive4(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class DictIncludeFromPostTags(TypedDict, total=False):
    """Relational arguments for PostTags"""
    values: Union[bool, 'FindManyDictValuesArgsFromPostTagsRecursive1']


class DictIncludeFromPostTagsRecursive1(TypedDict, total=False):
    """Relational arguments for PostTags"""
    values: Union[bool, 'FindManyDictValuesArgsFromPostTagsRecursive2']


class DictIncludeFromPostTagsRecursive2(TypedDict, total=False):
    """Relational arguments for PostTags"""
    values: Union[bool, 'FindManyDictValuesArgsFromPostTagsRecursive3']


class DictIncludeFromPostTagsRecursive3(TypedDict, total=False):
    """Relational arguments for PostTags"""
    values: Union[bool, 'FindManyDictValuesArgsFromPostTagsRecursive4']


class DictIncludeFromPostTagsRecursive4(TypedDict, total=False):
    """Relational arguments for PostTags"""

    

class DictArgsFromPostTags(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'DictIncludeFromDictRecursive1'


class DictArgsFromPostTagsRecursive1(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'DictIncludeFromDictRecursive2'


class DictArgsFromPostTagsRecursive2(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'DictIncludeFromDictRecursive3'


class DictArgsFromPostTagsRecursive3(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'DictIncludeFromDictRecursive4'


class DictArgsFromPostTagsRecursive4(TypedDict, total=False):
    """Arguments for PostTags"""
    
    

class FindManyDictArgsFromPostTags(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive1'


class FindManyDictArgsFromPostTagsRecursive1(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive2'


class FindManyDictArgsFromPostTagsRecursive2(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive3'


class FindManyDictArgsFromPostTagsRecursive3(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    include: 'DictIncludeFromDictRecursive4'


class FindManyDictArgsFromPostTagsRecursive4(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['DictOrderByInput', List['DictOrderByInput']]
    where: 'DictWhereInput'
    cursor: 'DictWhereUniqueInput'
    distinct: List['DictScalarFieldKeys']
    
    

class DictValuesIncludeFromPostTags(TypedDict, total=False):
    """Relational arguments for PostTags"""
    Dict: Union[bool, 'DictArgsFromPostTagsRecursive1']


class DictValuesIncludeFromPostTagsRecursive1(TypedDict, total=False):
    """Relational arguments for PostTags"""
    Dict: Union[bool, 'DictArgsFromPostTagsRecursive2']


class DictValuesIncludeFromPostTagsRecursive2(TypedDict, total=False):
    """Relational arguments for PostTags"""
    Dict: Union[bool, 'DictArgsFromPostTagsRecursive3']


class DictValuesIncludeFromPostTagsRecursive3(TypedDict, total=False):
    """Relational arguments for PostTags"""
    Dict: Union[bool, 'DictArgsFromPostTagsRecursive4']


class DictValuesIncludeFromPostTagsRecursive4(TypedDict, total=False):
    """Relational arguments for PostTags"""

    

class DictValuesArgsFromPostTags(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'DictValuesIncludeFromDictValuesRecursive1'


class DictValuesArgsFromPostTagsRecursive1(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'DictValuesIncludeFromDictValuesRecursive2'


class DictValuesArgsFromPostTagsRecursive2(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'DictValuesIncludeFromDictValuesRecursive3'


class DictValuesArgsFromPostTagsRecursive3(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'DictValuesIncludeFromDictValuesRecursive4'


class DictValuesArgsFromPostTagsRecursive4(TypedDict, total=False):
    """Arguments for PostTags"""
    
    

class FindManyDictValuesArgsFromPostTags(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive1'


class FindManyDictValuesArgsFromPostTagsRecursive1(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive2'


class FindManyDictValuesArgsFromPostTagsRecursive2(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive3'


class FindManyDictValuesArgsFromPostTagsRecursive3(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    include: 'DictValuesIncludeFromDictValuesRecursive4'


class FindManyDictValuesArgsFromPostTagsRecursive4(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['DictValuesOrderByInput', List['DictValuesOrderByInput']]
    where: 'DictValuesWhereInput'
    cursor: 'DictValuesWhereUniqueInput'
    distinct: List['DictValuesScalarFieldKeys']
    
    

class PostIncludeFromPostTags(TypedDict, total=False):
    """Relational arguments for PostTags"""
    tags: Union[bool, 'FindManyPostTagsArgsFromPostTagsRecursive1']


class PostIncludeFromPostTagsRecursive1(TypedDict, total=False):
    """Relational arguments for PostTags"""
    tags: Union[bool, 'FindManyPostTagsArgsFromPostTagsRecursive2']


class PostIncludeFromPostTagsRecursive2(TypedDict, total=False):
    """Relational arguments for PostTags"""
    tags: Union[bool, 'FindManyPostTagsArgsFromPostTagsRecursive3']


class PostIncludeFromPostTagsRecursive3(TypedDict, total=False):
    """Relational arguments for PostTags"""
    tags: Union[bool, 'FindManyPostTagsArgsFromPostTagsRecursive4']


class PostIncludeFromPostTagsRecursive4(TypedDict, total=False):
    """Relational arguments for PostTags"""

    

class PostArgsFromPostTags(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromPostTagsRecursive1(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromPostTagsRecursive2(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromPostTagsRecursive3(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromPostTagsRecursive4(TypedDict, total=False):
    """Arguments for PostTags"""
    
    

class FindManyPostArgsFromPostTags(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromPostTagsRecursive1(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromPostTagsRecursive2(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromPostTagsRecursive3(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromPostTagsRecursive4(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    
    

class PostCateIncludeFromPostTags(TypedDict, total=False):
    """Relational arguments for PostTags"""
    parent: Union[bool, 'PostCateArgsFromPostTagsRecursive1']
    PostCate: Union[bool, 'FindManyPostCateArgsFromPostTagsRecursive1']


class PostCateIncludeFromPostTagsRecursive1(TypedDict, total=False):
    """Relational arguments for PostTags"""
    parent: Union[bool, 'PostCateArgsFromPostTagsRecursive2']
    PostCate: Union[bool, 'FindManyPostCateArgsFromPostTagsRecursive2']


class PostCateIncludeFromPostTagsRecursive2(TypedDict, total=False):
    """Relational arguments for PostTags"""
    parent: Union[bool, 'PostCateArgsFromPostTagsRecursive3']
    PostCate: Union[bool, 'FindManyPostCateArgsFromPostTagsRecursive3']


class PostCateIncludeFromPostTagsRecursive3(TypedDict, total=False):
    """Relational arguments for PostTags"""
    parent: Union[bool, 'PostCateArgsFromPostTagsRecursive4']
    PostCate: Union[bool, 'FindManyPostCateArgsFromPostTagsRecursive4']


class PostCateIncludeFromPostTagsRecursive4(TypedDict, total=False):
    """Relational arguments for PostTags"""

    

class PostCateArgsFromPostTags(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'PostCateIncludeFromPostCateRecursive1'


class PostCateArgsFromPostTagsRecursive1(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'PostCateIncludeFromPostCateRecursive2'


class PostCateArgsFromPostTagsRecursive2(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'PostCateIncludeFromPostCateRecursive3'


class PostCateArgsFromPostTagsRecursive3(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'PostCateIncludeFromPostCateRecursive4'


class PostCateArgsFromPostTagsRecursive4(TypedDict, total=False):
    """Arguments for PostTags"""
    
    

class FindManyPostCateArgsFromPostTags(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive1'


class FindManyPostCateArgsFromPostTagsRecursive1(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive2'


class FindManyPostCateArgsFromPostTagsRecursive2(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive3'


class FindManyPostCateArgsFromPostTagsRecursive3(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    include: 'PostCateIncludeFromPostCateRecursive4'


class FindManyPostCateArgsFromPostTagsRecursive4(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['PostCateOrderByInput', List['PostCateOrderByInput']]
    where: 'PostCateWhereInput'
    cursor: 'PostCateWhereUniqueInput'
    distinct: List['PostCateScalarFieldKeys']
    
    

class PostTagsIncludeFromPostTags(TypedDict, total=False):
    """Relational arguments for PostTags"""
    posts: Union[bool, 'FindManyPostArgsFromPostTagsRecursive1']


class PostTagsIncludeFromPostTagsRecursive1(TypedDict, total=False):
    """Relational arguments for PostTags"""
    posts: Union[bool, 'FindManyPostArgsFromPostTagsRecursive2']


class PostTagsIncludeFromPostTagsRecursive2(TypedDict, total=False):
    """Relational arguments for PostTags"""
    posts: Union[bool, 'FindManyPostArgsFromPostTagsRecursive3']


class PostTagsIncludeFromPostTagsRecursive3(TypedDict, total=False):
    """Relational arguments for PostTags"""
    posts: Union[bool, 'FindManyPostArgsFromPostTagsRecursive4']


class PostTagsIncludeFromPostTagsRecursive4(TypedDict, total=False):
    """Relational arguments for PostTags"""

    

class PostTagsArgsFromPostTags(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'PostTagsIncludeFromPostTagsRecursive1'


class PostTagsArgsFromPostTagsRecursive1(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'PostTagsIncludeFromPostTagsRecursive2'


class PostTagsArgsFromPostTagsRecursive2(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'PostTagsIncludeFromPostTagsRecursive3'


class PostTagsArgsFromPostTagsRecursive3(TypedDict, total=False):
    """Arguments for PostTags"""
    include: 'PostTagsIncludeFromPostTagsRecursive4'


class PostTagsArgsFromPostTagsRecursive4(TypedDict, total=False):
    """Arguments for PostTags"""
    
    

class FindManyPostTagsArgsFromPostTags(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive1'


class FindManyPostTagsArgsFromPostTagsRecursive1(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive2'


class FindManyPostTagsArgsFromPostTagsRecursive2(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive3'


class FindManyPostTagsArgsFromPostTagsRecursive3(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    include: 'PostTagsIncludeFromPostTagsRecursive4'


class FindManyPostTagsArgsFromPostTagsRecursive4(TypedDict, total=False):
    """Arguments for PostTags"""
    take: int
    skip: int
    order_by: Union['PostTagsOrderByInput', List['PostTagsOrderByInput']]
    where: 'PostTagsWhereInput'
    cursor: 'PostTagsWhereUniqueInput'
    distinct: List['PostTagsScalarFieldKeys']
    


FindManyPostTagsArgs = FindManyPostTagsArgsFromPostTags
FindFirstPostTagsArgs = FindManyPostTagsArgsFromPostTags


    

class PostTagsWhereInput(TypedDict, total=False):
    """PostTags arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    status: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['PostTagsWhereInputRecursive1', List['PostTagsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PostTagsWhereInputRecursive1']
    OR: List['PostTagsWhereInputRecursive1']
    NOT: List['PostTagsWhereInputRecursive1']


class PostTagsWhereInputRecursive1(TypedDict, total=False):
    """PostTags arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    status: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['PostTagsWhereInputRecursive2', List['PostTagsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PostTagsWhereInputRecursive2']
    OR: List['PostTagsWhereInputRecursive2']
    NOT: List['PostTagsWhereInputRecursive2']


class PostTagsWhereInputRecursive2(TypedDict, total=False):
    """PostTags arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    status: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['PostTagsWhereInputRecursive3', List['PostTagsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PostTagsWhereInputRecursive3']
    OR: List['PostTagsWhereInputRecursive3']
    NOT: List['PostTagsWhereInputRecursive3']


class PostTagsWhereInputRecursive3(TypedDict, total=False):
    """PostTags arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    status: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['PostTagsWhereInputRecursive4', List['PostTagsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PostTagsWhereInputRecursive4']
    OR: List['PostTagsWhereInputRecursive4']
    NOT: List['PostTagsWhereInputRecursive4']


class PostTagsWhereInputRecursive4(TypedDict, total=False):
    """PostTags arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    status: Union[_int, 'types.IntFilter']



# aggregate PostTags types


    

class PostTagsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """PostTags arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['PostTagsScalarWhereWithAggregatesInputRecursive1']
    OR: List['PostTagsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PostTagsScalarWhereWithAggregatesInputRecursive1']


class PostTagsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """PostTags arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['PostTagsScalarWhereWithAggregatesInputRecursive2']
    OR: List['PostTagsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PostTagsScalarWhereWithAggregatesInputRecursive2']


class PostTagsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """PostTags arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['PostTagsScalarWhereWithAggregatesInputRecursive3']
    OR: List['PostTagsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PostTagsScalarWhereWithAggregatesInputRecursive3']


class PostTagsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """PostTags arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['PostTagsScalarWhereWithAggregatesInputRecursive4']
    OR: List['PostTagsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PostTagsScalarWhereWithAggregatesInputRecursive4']


class PostTagsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """PostTags arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_int, 'types.IntWithAggregatesFilter']



class PostTagsGroupByOutput(TypedDict, total=False):
    id: _str
    title: _str
    code: _str
    status: _int
    _sum: 'PostTagsSumAggregateOutput'
    _avg: 'PostTagsAvgAggregateOutput'
    _min: 'PostTagsMinAggregateOutput'
    _max: 'PostTagsMaxAggregateOutput'
    _count: 'PostTagsCountAggregateOutput'


class PostTagsAvgAggregateOutput(TypedDict, total=False):
    """PostTags output for aggregating averages"""
    status: float


class PostTagsSumAggregateOutput(TypedDict, total=False):
    """PostTags output for aggregating sums"""
    status: _int


class PostTagsScalarAggregateOutput(TypedDict, total=False):
    """PostTags output including scalar fields"""
    id: _str
    title: _str
    code: _str
    status: _int


PostTagsMinAggregateOutput = PostTagsScalarAggregateOutput
PostTagsMaxAggregateOutput = PostTagsScalarAggregateOutput


class PostTagsMaxAggregateInput(TypedDict, total=False):
    """PostTags input for aggregating by max"""
    id: bool
    title: bool
    code: bool
    status: bool


class PostTagsMinAggregateInput(TypedDict, total=False):
    """PostTags input for aggregating by min"""
    id: bool
    title: bool
    code: bool
    status: bool


class PostTagsNumberAggregateInput(TypedDict, total=False):
    """PostTags input for aggregating numbers"""
    status: bool


PostTagsAvgAggregateInput = PostTagsNumberAggregateInput
PostTagsSumAggregateInput = PostTagsNumberAggregateInput


PostTagsCountAggregateInput = TypedDict(
    'PostTagsCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'code': bool,
        'status': bool,
        '_all': bool,
    },
    total=False,
)

PostTagsCountAggregateOutput = TypedDict(
    'PostTagsCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'code': int,
        'status': int,
        '_all': int,
    },
    total=False,
)


PostTagsKeys = Literal[
    'id',
    'title',
    'code',
    'posts',
    'status',
]
PostTagsScalarFieldKeys = Literal[
    'id',
    'title',
    'code',
    'status',
]
PostTagsScalarFieldKeysT = TypeVar('PostTagsScalarFieldKeysT', bound=PostTagsScalarFieldKeys)

PostTagsRelationalFieldKeys = Literal[
        'posts',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields