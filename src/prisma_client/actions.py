# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases

if TYPE_CHECKING:
    from .client import Client
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class UserActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.User]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = User.prisma().query_raw(
            'SELECT * FROM User WHERE id = ?',
            'bbadfchfja',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.User
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = User.prisma().query_first(
            'SELECT * FROM User WHERE account = ?',
            'dhheabfhf',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.UserCreateInput,
        include: Optional[types.UserInclude] = None
    ) -> _PrismaModelT:
        """Create a new User record.

        Parameters
        ----------
        data
            User record data
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created User record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a User record from just the required fields
        user = User.prisma().create(
            data={
                # data to create a User record
                'account': 'ggciceaie',
                'password': 'bbehjachib',
                'nickname': 'cadfabfehe',
                'salt': 'dgiiaaijj',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='createOne',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def create_many(
        self,
        data: List[types.UserCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple User records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of User record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = User.prisma().create_many(
            data=[
                {
                    # data to create a User record
                    'account': 'bfaiacjjfc',
                    'password': 'eigcfgbif',
                    'nickname': 'bagcfbhiig',
                    'salt': 'cghideieh',
                },
                {
                    # data to create a User record
                    'account': 'biabhbdai',
                    'password': 'idghgaicb',
                    'nickname': 'fjfddhigg',
                    'salt': 'hjaecfifb',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            operation='mutation',
            method='createMany',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single User record.

        Parameters
        ----------
        where
            User filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The deleted User record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = User.prisma().delete(
            where={
                'id': 'cbbbjbfcii',
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='deleteOne',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def find_unique(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique User record.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = User.prisma().find_unique(
            where={
                'id': 'bbejhfidcb',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findUnique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple User records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N results
        where
            User filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.User]
            The list of all User records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 User records
        users = User.prisma().find_many(take=10)

        # find the first 5 User records ordered by the password field
        users = User.prisma().find_many(
            take=5,
            order={
                'password': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findMany',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single User record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the nickname field
        user = User.prisma().find_first(
            skip=1,
            order={
                'nickname': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findFirst',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def update(
        self,
        data: types.UserUpdateInput,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single User record.

        Parameters
        ----------
        data
            User record data specifying what to update
        where
            User filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The updated User record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = User.prisma().update(
            where={
                'id': 'bgeecijdgg',
            },
            data={
                # data to update the User record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='updateOne',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def upsert(
        self,
        where: types.UserWhereUniqueInput,
        data: types.UserUpsertInput,
        include: Optional[types.UserInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            User filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created or updated User record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = User.prisma().upsert(
            where={
                'id': 'bdiicjafbj',
            },
            data={
                'create': {
                    'id': 'bdiicjafbj',
                    'account': 'biabhbdai',
                    'password': 'idghgaicb',
                    'nickname': 'fjfddhigg',
                    'salt': 'hjaecfifb',
                },
                'update': {
                    'account': 'biabhbdai',
                    'password': 'idghgaicb',
                    'nickname': 'fjfddhigg',
                    'salt': 'hjaecfifb',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='upsertOne',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def update_many(
        self,
        data: types.UserUpdateManyMutationInput,
        where: types.UserWhereInput,
    ) -> int:
        """Update multiple User records

        Parameters
        ----------
        data
            User data to update the selected User records to
        where
            Filter to select the User records to update

        Returns
        -------
        int
            The total number of User records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all User records
        total = User.prisma().update_many(
            data={
                'salt': 'bgehebiafc'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='updateMany',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> int:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = User.prisma().count(
            select={
                '_all': True,
                'created_at': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.UserCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> types.UserCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.UserCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> Union[int, types.UserCountAggregateOutput]:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = User.prisma().count(
            select={
                '_all': True,
                'updated_at': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            operation='query',
            method='aggregate',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UserCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.UserWhereInput] = None
    ) -> int:
        """Delete multiple User records.

        Parameters
        ----------
        where
            Optional User filter to find the records to be deleted

        Returns
        -------
        int
            The total number of User records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all User records
        total = User.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='deleteMany',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.UserScalarFieldKeys'],
        *,
        where: Optional['types.UserWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UserAvgAggregateInput'] = None,
        sum: Optional['types.UserSumAggregateInput'] = None,
        min: Optional['types.UserMinAggregateInput'] = None,
        max: Optional['types.UserMaxAggregateInput'] = None,
        having: Optional['types.UserScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UserCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UserScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.UserScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.UserGroupByOutput']:
        """Group User records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar User fields to group records by
        where
            User filter to select records
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UserGroupByOutput]
            A list of dictionaries representing the User record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group User records by status values
        # and count how many records are in each group
        results = User.prisma().group_by(
            ['status'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            operation='query',
            method='groupBy',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class DictActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Dict]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = Dict.prisma().query_raw(
            'SELECT * FROM Dict WHERE id = ?',
            'bghffegacj',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Dict
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = Dict.prisma().query_first(
            'SELECT * FROM Dict WHERE main_code = ?',
            'bhghchehcc',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.DictCreateInput,
        include: Optional[types.DictInclude] = None
    ) -> _PrismaModelT:
        """Create a new Dict record.

        Parameters
        ----------
        data
            Dict record data
        include
            Specifies which relations should be loaded on the returned Dict model

        Returns
        -------
        prisma.models.Dict
            The created Dict record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Dict record from just the required fields
        dict = Dict.prisma().create(
            data={
                # data to create a Dict record
                'main_code': 'dcgchcbbf',
                'sub_code': 'bdedcabahc',
                'group': 'ghfhiafcb',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='createOne',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def create_many(
        self,
        data: List[types.DictCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Dict records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Dict record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = Dict.prisma().create_many(
            data=[
                {
                    # data to create a Dict record
                    'main_code': 'heejgedji',
                    'sub_code': 'bjgjgibgbf',
                    'group': 'bbbgbhfjge',
                },
                {
                    # data to create a Dict record
                    'main_code': 'igbehcbab',
                    'sub_code': 'bdadaadhag',
                    'group': 'bgiggdidbf',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            operation='mutation',
            method='createMany',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.DictWhereUniqueInput,
        include: Optional[types.DictInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Dict record.

        Parameters
        ----------
        where
            Dict filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Dict model

        Returns
        -------
        prisma.models.Dict
            The deleted Dict record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        dict = Dict.prisma().delete(
            where={
                'id': 'caaaedabfc',
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='deleteOne',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def find_unique(
        self,
        where: types.DictWhereUniqueInput,
        include: Optional[types.DictInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Dict record.

        Parameters
        ----------
        where
            Dict filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Dict model

        Returns
        -------
        prisma.models.Dict
            The found Dict record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        dict = Dict.prisma().find_unique(
            where={
                'id': 'bigibebcib',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findUnique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DictWhereInput] = None,
        cursor: Optional[types.DictWhereUniqueInput] = None,
        include: Optional[types.DictInclude] = None,
        order: Optional[Union[types.DictOrderByInput, List[types.DictOrderByInput]]] = None,
        distinct: Optional[List[types.DictScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Dict records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Dict records returned
        skip
            Ignore the first N results
        where
            Dict filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Dict model
        order
            Order the returned Dict records by any field
        distinct
            Filter Dict records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Dict]
            The list of all Dict records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Dict records
        dicts = Dict.prisma().find_many(take=10)

        # find the first 5 Dict records ordered by the sub_code field
        dicts = Dict.prisma().find_many(
            take=5,
            order={
                'sub_code': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findMany',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.DictWhereInput] = None,
        cursor: Optional[types.DictWhereUniqueInput] = None,
        include: Optional[types.DictInclude] = None,
        order: Optional[Union[types.DictOrderByInput, List[types.DictOrderByInput]]] = None,
        distinct: Optional[List[types.DictScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Dict record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Dict filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Dict model
        order
            Order the returned Dict records by any field
        distinct
            Filter Dict records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Dict
            The first Dict record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Dict record ordered by the group field
        dict = Dict.prisma().find_first(
            skip=1,
            order={
                'group': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findFirst',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def update(
        self,
        data: types.DictUpdateInput,
        where: types.DictWhereUniqueInput,
        include: Optional[types.DictInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Dict record.

        Parameters
        ----------
        data
            Dict record data specifying what to update
        where
            Dict filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Dict model

        Returns
        -------
        prisma.models.Dict
            The updated Dict record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        dict = Dict.prisma().update(
            where={
                'id': 'bigaiehgcc',
            },
            data={
                # data to update the Dict record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='updateOne',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def upsert(
        self,
        where: types.DictWhereUniqueInput,
        data: types.DictUpsertInput,
        include: Optional[types.DictInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Dict filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Dict model

        Returns
        -------
        prisma.models.Dict
            The created or updated Dict record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        dict = Dict.prisma().upsert(
            where={
                'id': 'beeifcbebf',
            },
            data={
                'create': {
                    'id': 'beeifcbebf',
                    'main_code': 'igbehcbab',
                    'sub_code': 'bdadaadhag',
                    'group': 'bgiggdidbf',
                },
                'update': {
                    'main_code': 'igbehcbab',
                    'sub_code': 'bdadaadhag',
                    'group': 'bgiggdidbf',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='upsertOne',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def update_many(
        self,
        data: types.DictUpdateManyMutationInput,
        where: types.DictWhereInput,
    ) -> int:
        """Update multiple Dict records

        Parameters
        ----------
        data
            Dict data to update the selected Dict records to
        where
            Filter to select the Dict records to update

        Returns
        -------
        int
            The total number of Dict records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Dict records
        total = Dict.prisma().update_many(
            data={
                'status': 1628650740
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='updateMany',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DictWhereInput] = None,
        cursor: Optional[types.DictWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Dict records present in the database

        Parameters
        ----------
        select
            Select the Dict fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Dict filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.DictCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Dict.prisma().count()

        # results: prisma.types.DictCountAggregateOutput
        results = Dict.prisma().count(
            select={
                '_all': True,
                'created_at': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.DictCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DictWhereInput] = None,
        cursor: Optional[types.DictWhereUniqueInput] = None,
    ) -> types.DictCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.DictCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DictWhereInput] = None,
        cursor: Optional[types.DictWhereUniqueInput] = None,
    ) -> Union[int, types.DictCountAggregateOutput]:
        """Count the number of Dict records present in the database

        Parameters
        ----------
        select
            Select the Dict fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Dict filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.DictCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Dict.prisma().count()

        # results: prisma.types.DictCountAggregateOutput
        results = Dict.prisma().count(
            select={
                '_all': True,
                'updated_at': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            operation='query',
            method='aggregate',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.DictCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.DictWhereInput] = None
    ) -> int:
        """Delete multiple Dict records.

        Parameters
        ----------
        where
            Optional Dict filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Dict records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Dict records
        total = Dict.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='deleteMany',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.DictScalarFieldKeys'],
        *,
        where: Optional['types.DictWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.DictAvgAggregateInput'] = None,
        sum: Optional['types.DictSumAggregateInput'] = None,
        min: Optional['types.DictMinAggregateInput'] = None,
        max: Optional['types.DictMaxAggregateInput'] = None,
        having: Optional['types.DictScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.DictCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.DictScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.DictScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.DictGroupByOutput']:
        """Group Dict records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Dict fields to group records by
        where
            Dict filter to select records
        take
            Limit the maximum number of Dict records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.DictGroupByOutput]
            A list of dictionaries representing the Dict record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Dict records by id values
        # and count how many records are in each group
        results = Dict.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            operation='query',
            method='groupBy',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class DictValuesActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.DictValues]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = DictValues.prisma().query_raw(
            'SELECT * FROM DictValues WHERE id = ?',
            'bcejgaggif',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.DictValues
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = DictValues.prisma().query_first(
            'SELECT * FROM DictValues WHERE code = ?',
            'idfjadbcc',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.DictValuesCreateInput,
        include: Optional[types.DictValuesInclude] = None
    ) -> _PrismaModelT:
        """Create a new DictValues record.

        Parameters
        ----------
        data
            DictValues record data
        include
            Specifies which relations should be loaded on the returned DictValues model

        Returns
        -------
        prisma.models.DictValues
            The created DictValues record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a DictValues record from just the required fields
        dictvalues = DictValues.prisma().create(
            data={
                # data to create a DictValues record
                'code': 'hgdhbjhhj',
                'dictId': 'ecjjjfbae',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='createOne',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def create_many(
        self,
        data: List[types.DictValuesCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple DictValues records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of DictValues record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = DictValues.prisma().create_many(
            data=[
                {
                    # data to create a DictValues record
                    'code': 'bhhfibbigf',
                    'dictId': 'ijdbeffgg',
                },
                {
                    # data to create a DictValues record
                    'code': 'jjfeafhfj',
                    'dictId': 'cbachdgfce',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            operation='mutation',
            method='createMany',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.DictValuesWhereUniqueInput,
        include: Optional[types.DictValuesInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single DictValues record.

        Parameters
        ----------
        where
            DictValues filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned DictValues model

        Returns
        -------
        prisma.models.DictValues
            The deleted DictValues record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        dictvalues = DictValues.prisma().delete(
            where={
                'id': 'chbfcacbd',
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='deleteOne',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def find_unique(
        self,
        where: types.DictValuesWhereUniqueInput,
        include: Optional[types.DictValuesInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique DictValues record.

        Parameters
        ----------
        where
            DictValues filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned DictValues model

        Returns
        -------
        prisma.models.DictValues
            The found DictValues record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        dictvalues = DictValues.prisma().find_unique(
            where={
                'id': 'efggddide',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findUnique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DictValuesWhereInput] = None,
        cursor: Optional[types.DictValuesWhereUniqueInput] = None,
        include: Optional[types.DictValuesInclude] = None,
        order: Optional[Union[types.DictValuesOrderByInput, List[types.DictValuesOrderByInput]]] = None,
        distinct: Optional[List[types.DictValuesScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple DictValues records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of DictValues records returned
        skip
            Ignore the first N results
        where
            DictValues filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned DictValues model
        order
            Order the returned DictValues records by any field
        distinct
            Filter DictValues records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.DictValues]
            The list of all DictValues records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 DictValues records
        dictvalues = DictValues.prisma().find_many(take=10)

        # find the first 5 DictValues records ordered by the value field
        dictvalues = DictValues.prisma().find_many(
            take=5,
            order={
                'value': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findMany',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.DictValuesWhereInput] = None,
        cursor: Optional[types.DictValuesWhereUniqueInput] = None,
        include: Optional[types.DictValuesInclude] = None,
        order: Optional[Union[types.DictValuesOrderByInput, List[types.DictValuesOrderByInput]]] = None,
        distinct: Optional[List[types.DictValuesScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single DictValues record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            DictValues filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned DictValues model
        order
            Order the returned DictValues records by any field
        distinct
            Filter DictValues records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.DictValues
            The first DictValues record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second DictValues record ordered by the sort field
        dictvalues = DictValues.prisma().find_first(
            skip=1,
            order={
                'sort': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findFirst',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def update(
        self,
        data: types.DictValuesUpdateInput,
        where: types.DictValuesWhereUniqueInput,
        include: Optional[types.DictValuesInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single DictValues record.

        Parameters
        ----------
        data
            DictValues record data specifying what to update
        where
            DictValues filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned DictValues model

        Returns
        -------
        prisma.models.DictValues
            The updated DictValues record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        dictvalues = DictValues.prisma().update(
            where={
                'id': 'caficfigfb',
            },
            data={
                # data to update the DictValues record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='updateOne',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def upsert(
        self,
        where: types.DictValuesWhereUniqueInput,
        data: types.DictValuesUpsertInput,
        include: Optional[types.DictValuesInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            DictValues filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned DictValues model

        Returns
        -------
        prisma.models.DictValues
            The created or updated DictValues record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        dictvalues = DictValues.prisma().upsert(
            where={
                'id': 'bfidgijfjc',
            },
            data={
                'create': {
                    'id': 'bfidgijfjc',
                    'code': 'jjfeafhfj',
                    'dictId': 'cbachdgfce',
                },
                'update': {
                    'code': 'jjfeafhfj',
                    'dictId': 'cbachdgfce',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='upsertOne',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def update_many(
        self,
        data: types.DictValuesUpdateManyMutationInput,
        where: types.DictValuesWhereInput,
    ) -> int:
        """Update multiple DictValues records

        Parameters
        ----------
        data
            DictValues data to update the selected DictValues records to
        where
            Filter to select the DictValues records to update

        Returns
        -------
        int
            The total number of DictValues records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all DictValues records
        total = DictValues.prisma().update_many(
            data={
                'type': 'ihieecagf'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='updateMany',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DictValuesWhereInput] = None,
        cursor: Optional[types.DictValuesWhereUniqueInput] = None,
    ) -> int:
        """Count the number of DictValues records present in the database

        Parameters
        ----------
        select
            Select the DictValues fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            DictValues filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.DictValuesCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = DictValues.prisma().count()

        # results: prisma.types.DictValuesCountAggregateOutput
        results = DictValues.prisma().count(
            select={
                '_all': True,
                'created_at': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.DictValuesCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DictValuesWhereInput] = None,
        cursor: Optional[types.DictValuesWhereUniqueInput] = None,
    ) -> types.DictValuesCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.DictValuesCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.DictValuesWhereInput] = None,
        cursor: Optional[types.DictValuesWhereUniqueInput] = None,
    ) -> Union[int, types.DictValuesCountAggregateOutput]:
        """Count the number of DictValues records present in the database

        Parameters
        ----------
        select
            Select the DictValues fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            DictValues filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.DictValuesCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = DictValues.prisma().count()

        # results: prisma.types.DictValuesCountAggregateOutput
        results = DictValues.prisma().count(
            select={
                '_all': True,
                'updated_at': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            operation='query',
            method='aggregate',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.DictValuesCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.DictValuesWhereInput] = None
    ) -> int:
        """Delete multiple DictValues records.

        Parameters
        ----------
        where
            Optional DictValues filter to find the records to be deleted

        Returns
        -------
        int
            The total number of DictValues records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all DictValues records
        total = DictValues.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='deleteMany',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.DictValuesScalarFieldKeys'],
        *,
        where: Optional['types.DictValuesWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.DictValuesAvgAggregateInput'] = None,
        sum: Optional['types.DictValuesSumAggregateInput'] = None,
        min: Optional['types.DictValuesMinAggregateInput'] = None,
        max: Optional['types.DictValuesMaxAggregateInput'] = None,
        having: Optional['types.DictValuesScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.DictValuesCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.DictValuesScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.DictValuesScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.DictValuesGroupByOutput']:
        """Group DictValues records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar DictValues fields to group records by
        where
            DictValues filter to select records
        take
            Limit the maximum number of DictValues records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.DictValuesGroupByOutput]
            A list of dictionaries representing the DictValues record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group DictValues records by status values
        # and count how many records are in each group
        results = DictValues.prisma().group_by(
            ['status'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            operation='query',
            method='groupBy',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class PostActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Post]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = Post.prisma().query_raw(
            'SELECT * FROM Post WHERE id = ?',
            'bghfciaafe',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Post
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = Post.prisma().query_first(
            'SELECT * FROM Post WHERE title = ?',
            'bgchfhgceh',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.PostCreateInput,
        include: Optional[types.PostInclude] = None
    ) -> _PrismaModelT:
        """Create a new Post record.

        Parameters
        ----------
        data
            Post record data
        include
            Specifies which relations should be loaded on the returned Post model

        Returns
        -------
        prisma.models.Post
            The created Post record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Post record from just the required fields
        post = Post.prisma().create(
            data={
                # data to create a Post record
                'title': 'cafeiaccbc',
                'code': 'gaddfhfh',
                'userId': 'gieegcbeg',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='createOne',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def create_many(
        self,
        data: List[types.PostCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Post records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Post record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = Post.prisma().create_many(
            data=[
                {
                    # data to create a Post record
                    'title': 'bgcffadich',
                    'code': 'fcbichhci',
                    'userId': 'bcggadccgf',
                },
                {
                    # data to create a Post record
                    'title': 'jdcfdcgc',
                    'code': 'cafdaehjid',
                    'userId': 'gifdddbia',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            operation='mutation',
            method='createMany',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.PostWhereUniqueInput,
        include: Optional[types.PostInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Post record.

        Parameters
        ----------
        where
            Post filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Post model

        Returns
        -------
        prisma.models.Post
            The deleted Post record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        post = Post.prisma().delete(
            where={
                'id': 'bchehecef',
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='deleteOne',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def find_unique(
        self,
        where: types.PostWhereUniqueInput,
        include: Optional[types.PostInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Post record.

        Parameters
        ----------
        where
            Post filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Post model

        Returns
        -------
        prisma.models.Post
            The found Post record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        post = Post.prisma().find_unique(
            where={
                'id': 'jeijcbhfe',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findUnique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostWhereInput] = None,
        cursor: Optional[types.PostWhereUniqueInput] = None,
        include: Optional[types.PostInclude] = None,
        order: Optional[Union[types.PostOrderByInput, List[types.PostOrderByInput]]] = None,
        distinct: Optional[List[types.PostScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Post records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Post records returned
        skip
            Ignore the first N results
        where
            Post filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Post model
        order
            Order the returned Post records by any field
        distinct
            Filter Post records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Post]
            The list of all Post records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Post records
        posts = Post.prisma().find_many(take=10)

        # find the first 5 Post records ordered by the code field
        posts = Post.prisma().find_many(
            take=5,
            order={
                'code': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findMany',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.PostWhereInput] = None,
        cursor: Optional[types.PostWhereUniqueInput] = None,
        include: Optional[types.PostInclude] = None,
        order: Optional[Union[types.PostOrderByInput, List[types.PostOrderByInput]]] = None,
        distinct: Optional[List[types.PostScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Post record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Post filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Post model
        order
            Order the returned Post records by any field
        distinct
            Filter Post records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Post
            The first Post record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Post record ordered by the content field
        post = Post.prisma().find_first(
            skip=1,
            order={
                'content': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findFirst',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def update(
        self,
        data: types.PostUpdateInput,
        where: types.PostWhereUniqueInput,
        include: Optional[types.PostInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Post record.

        Parameters
        ----------
        data
            Post record data specifying what to update
        where
            Post filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Post model

        Returns
        -------
        prisma.models.Post
            The updated Post record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        post = Post.prisma().update(
            where={
                'id': 'bjgejjabff',
            },
            data={
                # data to update the Post record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='updateOne',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def upsert(
        self,
        where: types.PostWhereUniqueInput,
        data: types.PostUpsertInput,
        include: Optional[types.PostInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Post filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Post model

        Returns
        -------
        prisma.models.Post
            The created or updated Post record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        post = Post.prisma().upsert(
            where={
                'id': 'bcciijbibg',
            },
            data={
                'create': {
                    'id': 'bcciijbibg',
                    'title': 'jdcfdcgc',
                    'code': 'cafdaehjid',
                    'userId': 'gifdddbia',
                },
                'update': {
                    'title': 'jdcfdcgc',
                    'code': 'cafdaehjid',
                    'userId': 'gifdddbia',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='upsertOne',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def update_many(
        self,
        data: types.PostUpdateManyMutationInput,
        where: types.PostWhereInput,
    ) -> int:
        """Update multiple Post records

        Parameters
        ----------
        data
            Post data to update the selected Post records to
        where
            Filter to select the Post records to update

        Returns
        -------
        int
            The total number of Post records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Post records
        total = Post.prisma().update_many(
            data={
                'is_deploy': False
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='updateMany',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostWhereInput] = None,
        cursor: Optional[types.PostWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Post records present in the database

        Parameters
        ----------
        select
            Select the Post fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Post filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PostCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Post.prisma().count()

        # results: prisma.types.PostCountAggregateOutput
        results = Post.prisma().count(
            select={
                '_all': True,
                'created_by': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.PostCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostWhereInput] = None,
        cursor: Optional[types.PostWhereUniqueInput] = None,
    ) -> types.PostCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.PostCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostWhereInput] = None,
        cursor: Optional[types.PostWhereUniqueInput] = None,
    ) -> Union[int, types.PostCountAggregateOutput]:
        """Count the number of Post records present in the database

        Parameters
        ----------
        select
            Select the Post fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Post filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PostCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Post.prisma().count()

        # results: prisma.types.PostCountAggregateOutput
        results = Post.prisma().count(
            select={
                '_all': True,
                'created_at': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            operation='query',
            method='aggregate',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.PostCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.PostWhereInput] = None
    ) -> int:
        """Delete multiple Post records.

        Parameters
        ----------
        where
            Optional Post filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Post records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Post records
        total = Post.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='deleteMany',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.PostScalarFieldKeys'],
        *,
        where: Optional['types.PostWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.PostAvgAggregateInput'] = None,
        sum: Optional['types.PostSumAggregateInput'] = None,
        min: Optional['types.PostMinAggregateInput'] = None,
        max: Optional['types.PostMaxAggregateInput'] = None,
        having: Optional['types.PostScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.PostCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.PostScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.PostScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.PostGroupByOutput']:
        """Group Post records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Post fields to group records by
        where
            Post filter to select records
        take
            Limit the maximum number of Post records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.PostGroupByOutput]
            A list of dictionaries representing the Post record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Post records by updated_at values
        # and count how many records are in each group
        results = Post.prisma().group_by(
            ['updated_at'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            operation='query',
            method='groupBy',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class PostCateActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.PostCate]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = PostCate.prisma().query_raw(
            'SELECT * FROM PostCate WHERE id = ?',
            'bccdfhdigc',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.PostCate
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = PostCate.prisma().query_first(
            'SELECT * FROM PostCate WHERE title = ?',
            'febcgjbfj',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.PostCateCreateInput,
        include: Optional[types.PostCateInclude] = None
    ) -> _PrismaModelT:
        """Create a new PostCate record.

        Parameters
        ----------
        data
            PostCate record data
        include
            Specifies which relations should be loaded on the returned PostCate model

        Returns
        -------
        prisma.models.PostCate
            The created PostCate record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a PostCate record from just the required fields
        postcate = PostCate.prisma().create(
            data={
                # data to create a PostCate record
                'title': 'bageiegghg',
                'code': 'faidicegb',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='createOne',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def create_many(
        self,
        data: List[types.PostCateCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple PostCate records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of PostCate record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = PostCate.prisma().create_many(
            data=[
                {
                    # data to create a PostCate record
                    'title': 'bacecgfhbe',
                    'code': 'ihcahiead',
                },
                {
                    # data to create a PostCate record
                    'title': 'biheheiajg',
                    'code': 'jbgijghgb',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            operation='mutation',
            method='createMany',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.PostCateWhereUniqueInput,
        include: Optional[types.PostCateInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single PostCate record.

        Parameters
        ----------
        where
            PostCate filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned PostCate model

        Returns
        -------
        prisma.models.PostCate
            The deleted PostCate record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        postcate = PostCate.prisma().delete(
            where={
                'id': 'hgjcghfbi',
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='deleteOne',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def find_unique(
        self,
        where: types.PostCateWhereUniqueInput,
        include: Optional[types.PostCateInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique PostCate record.

        Parameters
        ----------
        where
            PostCate filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned PostCate model

        Returns
        -------
        prisma.models.PostCate
            The found PostCate record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        postcate = PostCate.prisma().find_unique(
            where={
                'id': 'icadbcehj',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findUnique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostCateWhereInput] = None,
        cursor: Optional[types.PostCateWhereUniqueInput] = None,
        include: Optional[types.PostCateInclude] = None,
        order: Optional[Union[types.PostCateOrderByInput, List[types.PostCateOrderByInput]]] = None,
        distinct: Optional[List[types.PostCateScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple PostCate records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of PostCate records returned
        skip
            Ignore the first N results
        where
            PostCate filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned PostCate model
        order
            Order the returned PostCate records by any field
        distinct
            Filter PostCate records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.PostCate]
            The list of all PostCate records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 PostCate records
        postcates = PostCate.prisma().find_many(take=10)

        # find the first 5 PostCate records ordered by the code field
        postcates = PostCate.prisma().find_many(
            take=5,
            order={
                'code': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findMany',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.PostCateWhereInput] = None,
        cursor: Optional[types.PostCateWhereUniqueInput] = None,
        include: Optional[types.PostCateInclude] = None,
        order: Optional[Union[types.PostCateOrderByInput, List[types.PostCateOrderByInput]]] = None,
        distinct: Optional[List[types.PostCateScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single PostCate record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            PostCate filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned PostCate model
        order
            Order the returned PostCate records by any field
        distinct
            Filter PostCate records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.PostCate
            The first PostCate record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second PostCate record ordered by the is_root field
        postcate = PostCate.prisma().find_first(
            skip=1,
            order={
                'is_root': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findFirst',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def update(
        self,
        data: types.PostCateUpdateInput,
        where: types.PostCateWhereUniqueInput,
        include: Optional[types.PostCateInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single PostCate record.

        Parameters
        ----------
        data
            PostCate record data specifying what to update
        where
            PostCate filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned PostCate model

        Returns
        -------
        prisma.models.PostCate
            The updated PostCate record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        postcate = PostCate.prisma().update(
            where={
                'id': 'jchciaee',
            },
            data={
                # data to update the PostCate record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='updateOne',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def upsert(
        self,
        where: types.PostCateWhereUniqueInput,
        data: types.PostCateUpsertInput,
        include: Optional[types.PostCateInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            PostCate filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned PostCate model

        Returns
        -------
        prisma.models.PostCate
            The created or updated PostCate record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        postcate = PostCate.prisma().upsert(
            where={
                'id': 'deeificjd',
            },
            data={
                'create': {
                    'id': 'deeificjd',
                    'title': 'biheheiajg',
                    'code': 'jbgijghgb',
                },
                'update': {
                    'title': 'biheheiajg',
                    'code': 'jbgijghgb',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='upsertOne',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def update_many(
        self,
        data: types.PostCateUpdateManyMutationInput,
        where: types.PostCateWhereInput,
    ) -> int:
        """Update multiple PostCate records

        Parameters
        ----------
        data
            PostCate data to update the selected PostCate records to
        where
            Filter to select the PostCate records to update

        Returns
        -------
        int
            The total number of PostCate records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all PostCate records
        total = PostCate.prisma().update_many(
            data={
                'status': 1121741130
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='updateMany',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostCateWhereInput] = None,
        cursor: Optional[types.PostCateWhereUniqueInput] = None,
    ) -> int:
        """Count the number of PostCate records present in the database

        Parameters
        ----------
        select
            Select the PostCate fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            PostCate filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PostCateCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = PostCate.prisma().count()

        # results: prisma.types.PostCateCountAggregateOutput
        results = PostCate.prisma().count(
            select={
                '_all': True,
                'postCateId': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.PostCateCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostCateWhereInput] = None,
        cursor: Optional[types.PostCateWhereUniqueInput] = None,
    ) -> types.PostCateCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.PostCateCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostCateWhereInput] = None,
        cursor: Optional[types.PostCateWhereUniqueInput] = None,
    ) -> Union[int, types.PostCateCountAggregateOutput]:
        """Count the number of PostCate records present in the database

        Parameters
        ----------
        select
            Select the PostCate fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            PostCate filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PostCateCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = PostCate.prisma().count()

        # results: prisma.types.PostCateCountAggregateOutput
        results = PostCate.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            operation='query',
            method='aggregate',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.PostCateCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.PostCateWhereInput] = None
    ) -> int:
        """Delete multiple PostCate records.

        Parameters
        ----------
        where
            Optional PostCate filter to find the records to be deleted

        Returns
        -------
        int
            The total number of PostCate records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all PostCate records
        total = PostCate.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='deleteMany',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.PostCateScalarFieldKeys'],
        *,
        where: Optional['types.PostCateWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.PostCateAvgAggregateInput'] = None,
        sum: Optional['types.PostCateSumAggregateInput'] = None,
        min: Optional['types.PostCateMinAggregateInput'] = None,
        max: Optional['types.PostCateMaxAggregateInput'] = None,
        having: Optional['types.PostCateScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.PostCateCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.PostCateScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.PostCateScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.PostCateGroupByOutput']:
        """Group PostCate records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar PostCate fields to group records by
        where
            PostCate filter to select records
        take
            Limit the maximum number of PostCate records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.PostCateGroupByOutput]
            A list of dictionaries representing the PostCate record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group PostCate records by title values
        # and count how many records are in each group
        results = PostCate.prisma().group_by(
            ['title'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            operation='query',
            method='groupBy',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class PostTagsActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.PostTags]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = PostTags.prisma().query_raw(
            'SELECT * FROM PostTags WHERE id = ?',
            'bejfijgcfb',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.PostTags
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = PostTags.prisma().query_first(
            'SELECT * FROM PostTags WHERE title = ?',
            'caifcbgii',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.PostTagsCreateInput,
        include: Optional[types.PostTagsInclude] = None
    ) -> _PrismaModelT:
        """Create a new PostTags record.

        Parameters
        ----------
        data
            PostTags record data
        include
            Specifies which relations should be loaded on the returned PostTags model

        Returns
        -------
        prisma.models.PostTags
            The created PostTags record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a PostTags record from just the required fields
        posttags = PostTags.prisma().create(
            data={
                # data to create a PostTags record
                'title': 'igaibbfgj',
                'code': 'bggajdcbbi',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='createOne',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def create_many(
        self,
        data: List[types.PostTagsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple PostTags records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of PostTags record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = PostTags.prisma().create_many(
            data=[
                {
                    # data to create a PostTags record
                    'title': 'fcfhgbjed',
                    'code': 'hdgcajhjg',
                },
                {
                    # data to create a PostTags record
                    'title': 'ejdjahicb',
                    'code': 'gdjgigfgc',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            operation='mutation',
            method='createMany',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.PostTagsWhereUniqueInput,
        include: Optional[types.PostTagsInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single PostTags record.

        Parameters
        ----------
        where
            PostTags filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned PostTags model

        Returns
        -------
        prisma.models.PostTags
            The deleted PostTags record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        posttags = PostTags.prisma().delete(
            where={
                'id': 'gfeaahdeh',
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='deleteOne',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def find_unique(
        self,
        where: types.PostTagsWhereUniqueInput,
        include: Optional[types.PostTagsInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique PostTags record.

        Parameters
        ----------
        where
            PostTags filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned PostTags model

        Returns
        -------
        prisma.models.PostTags
            The found PostTags record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        posttags = PostTags.prisma().find_unique(
            where={
                'id': 'bjafcgbffc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findUnique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostTagsWhereInput] = None,
        cursor: Optional[types.PostTagsWhereUniqueInput] = None,
        include: Optional[types.PostTagsInclude] = None,
        order: Optional[Union[types.PostTagsOrderByInput, List[types.PostTagsOrderByInput]]] = None,
        distinct: Optional[List[types.PostTagsScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple PostTags records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of PostTags records returned
        skip
            Ignore the first N results
        where
            PostTags filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned PostTags model
        order
            Order the returned PostTags records by any field
        distinct
            Filter PostTags records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.PostTags]
            The list of all PostTags records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 PostTags records
        posttags = PostTags.prisma().find_many(take=10)

        # find the first 5 PostTags records ordered by the code field
        posttags = PostTags.prisma().find_many(
            take=5,
            order={
                'code': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findMany',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.PostTagsWhereInput] = None,
        cursor: Optional[types.PostTagsWhereUniqueInput] = None,
        include: Optional[types.PostTagsInclude] = None,
        order: Optional[Union[types.PostTagsOrderByInput, List[types.PostTagsOrderByInput]]] = None,
        distinct: Optional[List[types.PostTagsScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single PostTags record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            PostTags filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned PostTags model
        order
            Order the returned PostTags records by any field
        distinct
            Filter PostTags records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.PostTags
            The first PostTags record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second PostTags record ordered by the status field
        posttags = PostTags.prisma().find_first(
            skip=1,
            order={
                'status': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findFirst',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def update(
        self,
        data: types.PostTagsUpdateInput,
        where: types.PostTagsWhereUniqueInput,
        include: Optional[types.PostTagsInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single PostTags record.

        Parameters
        ----------
        data
            PostTags record data specifying what to update
        where
            PostTags filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned PostTags model

        Returns
        -------
        prisma.models.PostTags
            The updated PostTags record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        posttags = PostTags.prisma().update(
            where={
                'id': 'hihegjif',
            },
            data={
                # data to update the PostTags record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='updateOne',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def upsert(
        self,
        where: types.PostTagsWhereUniqueInput,
        data: types.PostTagsUpsertInput,
        include: Optional[types.PostTagsInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            PostTags filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned PostTags model

        Returns
        -------
        prisma.models.PostTags
            The created or updated PostTags record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        posttags = PostTags.prisma().upsert(
            where={
                'id': 'bdjidcidac',
            },
            data={
                'create': {
                    'id': 'bdjidcidac',
                    'title': 'ejdjahicb',
                    'code': 'gdjgigfgc',
                },
                'update': {
                    'title': 'ejdjahicb',
                    'code': 'gdjgigfgc',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='upsertOne',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def update_many(
        self,
        data: types.PostTagsUpdateManyMutationInput,
        where: types.PostTagsWhereInput,
    ) -> int:
        """Update multiple PostTags records

        Parameters
        ----------
        data
            PostTags data to update the selected PostTags records to
        where
            Filter to select the PostTags records to update

        Returns
        -------
        int
            The total number of PostTags records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all PostTags records
        total = PostTags.prisma().update_many(
            data={
                'id': 'ifgaaagff'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='updateMany',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostTagsWhereInput] = None,
        cursor: Optional[types.PostTagsWhereUniqueInput] = None,
    ) -> int:
        """Count the number of PostTags records present in the database

        Parameters
        ----------
        select
            Select the PostTags fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            PostTags filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PostTagsCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = PostTags.prisma().count()

        # results: prisma.types.PostTagsCountAggregateOutput
        results = PostTags.prisma().count(
            select={
                '_all': True,
                'title': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.PostTagsCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostTagsWhereInput] = None,
        cursor: Optional[types.PostTagsWhereUniqueInput] = None,
    ) -> types.PostTagsCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.PostTagsCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PostTagsWhereInput] = None,
        cursor: Optional[types.PostTagsWhereUniqueInput] = None,
    ) -> Union[int, types.PostTagsCountAggregateOutput]:
        """Count the number of PostTags records present in the database

        Parameters
        ----------
        select
            Select the PostTags fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            PostTags filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PostTagsCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = PostTags.prisma().count()

        # results: prisma.types.PostTagsCountAggregateOutput
        results = PostTags.prisma().count(
            select={
                '_all': True,
                'code': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            operation='query',
            method='aggregate',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.PostTagsCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.PostTagsWhereInput] = None
    ) -> int:
        """Delete multiple PostTags records.

        Parameters
        ----------
        where
            Optional PostTags filter to find the records to be deleted

        Returns
        -------
        int
            The total number of PostTags records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all PostTags records
        total = PostTags.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='deleteMany',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.PostTagsScalarFieldKeys'],
        *,
        where: Optional['types.PostTagsWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.PostTagsAvgAggregateInput'] = None,
        sum: Optional['types.PostTagsSumAggregateInput'] = None,
        min: Optional['types.PostTagsMinAggregateInput'] = None,
        max: Optional['types.PostTagsMaxAggregateInput'] = None,
        having: Optional['types.PostTagsScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.PostTagsCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.PostTagsScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.PostTagsScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.PostTagsGroupByOutput']:
        """Group PostTags records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar PostTags fields to group records by
        where
            PostTags filter to select records
        take
            Limit the maximum number of PostTags records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.PostTagsGroupByOutput]
            A list of dictionaries representing the PostTags record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group PostTags records by status values
        # and count how many records are in each group
        results = PostTags.prisma().group_by(
            ['status'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            operation='query',
            method='groupBy',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models
